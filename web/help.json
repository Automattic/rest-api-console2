{
    "code": 200,
    "headers": [{
        "name": "Content-Type",
        "value": "application/json"
    }
    ],
    "body": [{
        "description": "Information about a site ID/domain",
        "method": "GET",
        "path_format": "/sites/%s",
        "path_labeled": "/sites/$site",
        "group": "sites",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                }
            },
            "query": {
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "Site ID"
                },
                "name": {
                    "type": "(string)",
                    "description": "Title of site"
                },
                "description": {
                    "type": "(string)",
                    "description": "Tagline or description of site"
                },
                "URL": {
                    "type": "(string)",
                    "description": "Full URL to the site"
                },
                "jetpack": {
                    "type": "(bool)",
                    "description": "Whether the site is a Jetpack site or not"
                },
                "post_count": {
                    "type": "(int)",
                    "description": "The number of posts the site has"
                },
                "subscribers_count": {
                    "type": "(int)",
                    "description": "The number of subscribers the site has"
                },
                "lang": {
                    "type": "(string)",
                    "description": "Primary language code of the site"
                },
                "visible": {
                    "type": "(bool)",
                    "description": "If this site is visible in the user's site list"
                },
                "is_private": {
                    "type": "(bool)",
                    "description": "If the site is a private site or not"
                },
                "is_following": {
                    "type": "(bool)",
                    "description": "If the current user is subscribed to this site in the reader"
                },
                "options": {
                    "type": "(array)",
                    "description": "An array of options/settings for the blog. Only viewable by users with access to the site."
                },
                "meta": {
                    "type": "(object)",
                    "description": "Meta data"
                }
            }
        }
    }, {
        "description": "Return matching Posts",
        "method": "GET",
        "path_format": "/sites/%s/posts/",
        "path_labeled": "/sites/$site/posts/",
        "group": "posts",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "number": {
                    "type": "(int)",
                    "description": "The number of posts to return.  Limit: 100. Default: 20."
                },
                "offset": {
                    "type": "(int)",
                    "description": "0-indexed offset."
                },
                "page": {
                    "type": "(int)",
                    "description": "Return the Nth 1-indexed page of posts.  Takes precedence over the <code>offset</code> parameter."
                },
                "order": {
                    "type": "(string)",
                    "description": {
                        "DESC": "(default) Return posts in descending order.  For dates, that means newest to oldest.",
                        "ASC": "Return posts in ascending order.  For dates, that means oldest to newest."
                    }
                },
                "order_by": {
                    "type": "(string)",
                    "description": {
                        "date": "(default) Order by the created time of each post.",
                        "modified": "Order by the modified time of each post.",
                        "title": "Order lexicographically by the posts' titles.",
                        "comment_count": "Order by the number of comments for each post.",
                        "ID": "Order by post ID."
                    }
                },
                "after": {
                    "type": "(iso 8601 datetime)",
                    "description": "Return posts dated on or after the specified datetime."
                },
                "before": {
                    "type": "(iso 8601 datetime)",
                    "description": "Return posts dated on or before the specified datetime."
                },
                "tag": {
                    "type": "(string)",
                    "description": "Specify the tag name or slug."
                },
                "category": {
                    "type": "(string)",
                    "description": "Specify the category name or slug."
                },
                "type": {
                    "type": "(string)",
                    "description": "Specify the post type. Defaults to 'post', use 'any' to query for both posts and pages. Post types besides post and page need to be whitelisted using the <code>rest_api_allowed_post_types</code> filter."
                },
                "status": {
                    "type": "(string)",
                    "description": {
                        "publish": "(default) Return only published posts.",
                        "private": "Return only private posts.",
                        "draft": "Return only draft posts.",
                        "pending": "Return only posts pending editorial approval.",
                        "future": "Return only posts scheduled for future publishing.",
                        "trash": "Return only posts in the trash.",
                        "any": "Return all posts regardless of status."
                    }
                },
                "sticky": {
                    "type": "(bool)",
                    "description": "Specify the stickiness."
                },
                "author": {
                    "type": "(int)",
                    "description": "Author's user ID"
                },
                "search": {
                    "type": "(string)",
                    "description": "Search query"
                },
                "meta_key": {
                    "type": "(string)",
                    "description": "Metadata key that the post should contain"
                },
                "meta_value": {
                    "type": "(string)",
                    "description": "Metadata value that the post should contain. Will only be applied if a `meta_key` is also given"
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "found": {
                    "type": "(int)",
                    "description": "The total number of posts found that match the request (ignoring limits, offsets, and pagination)."
                },
                "posts": {
                    "type": "(array)",
                    "description": "An array of post objects."
                }
            }
        }
    }, {
        "description": "Return a single Post (by ID)",
        "method": "GET",
        "path_format": "/sites/%s/posts/%d",
        "path_labeled": "/sites/$site/posts/$post_ID",
        "group": "posts",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$post_ID": {
                    "type": "(int)",
                    "description": "The post ID"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "The post ID."
                },
                "site_ID": {
                    "type": "(int)",
                    "description": "The site ID."
                },
                "author": {
                    "type": "(object)",
                    "description": "The author of the post."
                },
                "date": {
                    "type": "(iso 8601 datetime)",
                    "description": "The post's creation time."
                },
                "modified": {
                    "type": "(iso 8601 datetime)",
                    "description": "The post's most recent update time."
                },
                "title": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "URL": {
                    "type": "(url)",
                    "description": "The full permalink URL to the post."
                },
                "short_URL": {
                    "type": "(url)",
                    "description": "The wp.me short URL."
                },
                "content": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "excerpt": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "slug": {
                    "type": "(string)",
                    "description": "The name (slug) for the post, used in URLs."
                },
                "guid": {
                    "type": "(string)",
                    "description": "The GUID for the post."
                },
                "status": {
                    "type": "(string)",
                    "description": {
                        "publish": "The post is published.",
                        "draft": "The post is saved as a draft.",
                        "pending": "The post is pending editorial approval.",
                        "future": "The post is scheduled for future publishing.",
                        "trash": "The post is in the trash."
                    }
                },
                "sticky": {
                    "type": "(bool)",
                    "description": "Is the post sticky?"
                },
                "password": {
                    "type": "(string)",
                    "description": "The plaintext password protecting the post, or, more likely, the empty string if the post is not password protected."
                },
                "parent": {
                    "type": "(object|false)",
                    "description": "A reference to the post's parent, if it has one."
                },
                "type": {
                    "type": "(string)",
                    "description": "The post's post_type. Post types besides post and page need to be whitelisted using the <code>rest_api_allowed_post_types</code> filter."
                },
                "comments_open": {
                    "type": "(bool)",
                    "description": "Is the post open for comments?"
                },
                "pings_open": {
                    "type": "(bool)",
                    "description": "Is the post open for pingbacks, trackbacks?"
                },
                "likes_enabled": {
                    "type": "(bool)",
                    "description": "Is the post open to likes?"
                },
                "sharing_enabled": {
                    "type": "(bool)",
                    "description": "Should sharing buttons show on this post?"
                },
                "gplusauthorship_enabled": {
                    "type": "(bool)",
                    "description": "Should a Google+ account be associated with this post?"
                },
                "comment_count": {
                    "type": "(int)",
                    "description": "The number of comments for this post."
                },
                "like_count": {
                    "type": "(int)",
                    "description": "The number of likes for this post."
                },
                "i_like": {
                    "type": "(bool)",
                    "description": "Does the current user like this post?"
                },
                "is_reblogged": {
                    "type": "(bool)",
                    "description": "Did the current user reblog this post?"
                },
                "is_following": {
                    "type": "(bool)",
                    "description": "Is the current user following this blog?"
                },
                "global_ID": {
                    "type": "(string)",
                    "description": "A unique WordPress.com-wide representation of a post."
                },
                "featured_image": {
                    "type": "(url)",
                    "description": "The URL to the featured image for this post if it has one."
                },
                "format": {
                    "type": "(string)",
                    "description": {
                        "standard": "Standard",
                        "aside": "Aside",
                        "chat": "Chat",
                        "gallery": "Gallery",
                        "link": "Link",
                        "image": "Image",
                        "quote": "Quote",
                        "status": "Status",
                        "video": "Video",
                        "audio": "Audio"
                    }
                },
                "geo": {
                    "type": "(object|false)",
                    "description": ""
                },
                "publicize_URLs": {
                    "type": "(array)",
                    "description": "Array of Twitter and Facebook URLs published by this post."
                },
                "tags": {
                    "type": "(object)",
                    "description": "Hash of tags (keyed by tag name) applied to the post."
                },
                "categories": {
                    "type": "(object)",
                    "description": "Hash of categories (keyed by category name) applied to the post."
                },
                "attachments": {
                    "type": "(object)",
                    "description": "Hash of post attachments (keyed by attachment ID)."
                },
                "metadata": {
                    "type": "(array)",
                    "description": "Array of post metadata keys and values. All unprotected meta keys are available by default for read requests. Both unprotected and protected meta keys are available for authenticated requests with access. Protected meta keys can be made available with the <code>rest_api_allowed_public_metadata</code> filter."
                },
                "meta": {
                    "type": "(object)",
                    "description": "API result meta data"
                }
            }
        }
    }, {
        "description": "Edit a Post",
        "method": "POST",
        "path_format": "/sites/%s/posts/%d",
        "path_labeled": "/sites/$site/posts/$post_ID",
        "group": "posts",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$post_ID": {
                    "type": "(int)",
                    "description": "The post ID"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "date": {
                    "type": "(iso 8601 datetime)",
                    "description": "The post's creation time."
                },
                "title": {
                    "type": "(html)",
                    "description": "The post title."
                },
                "content": {
                    "type": "(html)",
                    "description": "The post content."
                },
                "excerpt": {
                    "type": "(html)",
                    "description": "An optional post excerpt."
                },
                "slug": {
                    "type": "(string)",
                    "description": "The name (slug) for the post, used in URLs."
                },
                "author": {
                    "type": "(string)",
                    "description": "The username or ID for the user to assign the post to."
                },
                "publicize": {
                    "type": "(array|bool)",
                    "description": "True or false if the post be publicized to external services. An array of services if we only want to publicize to a select few. Defaults to true."
                },
                "publicize_message": {
                    "type": "(string)",
                    "description": "Custom message to be publicized to external services."
                },
                "status": {
                    "type": "(string)",
                    "description": {
                        "publish": "(default) Publish the post.",
                        "private": "Privately publish the post.",
                        "draft": "Save the post as a draft.",
                        "pending": "Mark the post as pending editorial approval."
                    }
                },
                "sticky": {
                    "type": "(bool)",
                    "description": "Mark the post as sticky?"
                },
                "password": {
                    "type": "(string)",
                    "description": "The plaintext password protecting the post, or, more likely, the empty string if the post is not password protected."
                },
                "parent": {
                    "type": "(int)",
                    "description": "The post ID of the new post's parent."
                },
                "categories": {
                    "type": "(string)",
                    "description": "Comma separated list of categories (name or id)"
                },
                "tags": {
                    "type": "(string)",
                    "description": "Comma separated list of tags (name or id)"
                },
                "format": {
                    "type": "(string)",
                    "description": {
                        "standard": "(default) Standard",
                        "aside": "Aside",
                        "chat": "Chat",
                        "gallery": "Gallery",
                        "link": "Link",
                        "image": "Image",
                        "quote": "Quote",
                        "status": "Status",
                        "video": "Video",
                        "audio": "Audio"
                    }
                },
                "comments_open": {
                    "type": "(bool)",
                    "description": "Should the post be open to comments?"
                },
                "pings_open": {
                    "type": "(bool)",
                    "description": "Should the post be open to comments?"
                },
                "likes_enabled": {
                    "type": "(bool)",
                    "description": "Should the post be open to likes?"
                },
                "sharing_enabled": {
                    "type": "(bool)",
                    "description": "Should sharing buttons show on this post?"
                },
                "gplusauthorship_enabled": {
                    "type": "(bool)",
                    "description": "Should a Google+ account be associated with this post?"
                },
                "featured_image": {
                    "type": "(string)",
                    "description": "The post ID of an existing attachment to set as the featured image. Pass an empty string to delete the existing image."
                },
                "media": {
                    "type": "(media)",
                    "description": "An array of images to attach to the post. To upload media, the entire request should be multipart/form-data encoded.  Multiple media items will be displayed in a gallery.  Accepts images (image/gif, image/jpeg, image/png) only.<br /><br /><strong>Example</strong>:<br /><code>curl \\<br />--form 'title=Image' \\<br />--form 'media[]=@/path/to/file.jpg' \\<br />-H 'Authorization: BEARER your-token' \\<br />'https://public-api.wordpress.com/rest/v1/sites/123/posts/new'</code>"
                },
                "media_urls": {
                    "type": "(array)",
                    "description": "An array of URLs for images to attach to the post. Sideloads the media in for the post."
                },
                "metadata": {
                    "type": "(array)",
                    "description": "Array of metadata objects containing the following properties: `key` (metadata key), `id` (meta ID), `previous_value` (if set, the action will only occur for the provided previous value), `value` (the new value to set the meta to), `operation` (the operation to perform: `update` or `add`; defaults to `update`). All unprotected meta keys are available by default for read requests. Both unprotected and protected meta keys are available for authenticated requests with proper capabilities. Protected meta keys can be made available with the <code>rest_api_allowed_public_metadata</code> filter."
                }
            }
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "The post ID."
                },
                "site_ID": {
                    "type": "(int)",
                    "description": "The site ID."
                },
                "author": {
                    "type": "(object)",
                    "description": "The author of the post."
                },
                "date": {
                    "type": "(iso 8601 datetime)",
                    "description": "The post's creation time."
                },
                "modified": {
                    "type": "(iso 8601 datetime)",
                    "description": "The post's most recent update time."
                },
                "title": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "URL": {
                    "type": "(url)",
                    "description": "The full permalink URL to the post."
                },
                "short_URL": {
                    "type": "(url)",
                    "description": "The wp.me short URL."
                },
                "content": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "excerpt": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "slug": {
                    "type": "(string)",
                    "description": "The name (slug) for the post, used in URLs."
                },
                "guid": {
                    "type": "(string)",
                    "description": "The GUID for the post."
                },
                "status": {
                    "type": "(string)",
                    "description": {
                        "publish": "The post is published.",
                        "draft": "The post is saved as a draft.",
                        "pending": "The post is pending editorial approval.",
                        "future": "The post is scheduled for future publishing.",
                        "trash": "The post is in the trash."
                    }
                },
                "sticky": {
                    "type": "(bool)",
                    "description": "Is the post sticky?"
                },
                "password": {
                    "type": "(string)",
                    "description": "The plaintext password protecting the post, or, more likely, the empty string if the post is not password protected."
                },
                "parent": {
                    "type": "(object|false)",
                    "description": "A reference to the post's parent, if it has one."
                },
                "type": {
                    "type": "(string)",
                    "description": "The post's post_type. Post types besides post and page need to be whitelisted using the <code>rest_api_allowed_post_types</code> filter."
                },
                "comments_open": {
                    "type": "(bool)",
                    "description": "Is the post open for comments?"
                },
                "pings_open": {
                    "type": "(bool)",
                    "description": "Is the post open for pingbacks, trackbacks?"
                },
                "likes_enabled": {
                    "type": "(bool)",
                    "description": "Is the post open to likes?"
                },
                "sharing_enabled": {
                    "type": "(bool)",
                    "description": "Should sharing buttons show on this post?"
                },
                "gplusauthorship_enabled": {
                    "type": "(bool)",
                    "description": "Should a Google+ account be associated with this post?"
                },
                "comment_count": {
                    "type": "(int)",
                    "description": "The number of comments for this post."
                },
                "like_count": {
                    "type": "(int)",
                    "description": "The number of likes for this post."
                },
                "i_like": {
                    "type": "(bool)",
                    "description": "Does the current user like this post?"
                },
                "is_reblogged": {
                    "type": "(bool)",
                    "description": "Did the current user reblog this post?"
                },
                "is_following": {
                    "type": "(bool)",
                    "description": "Is the current user following this blog?"
                },
                "global_ID": {
                    "type": "(string)",
                    "description": "A unique WordPress.com-wide representation of a post."
                },
                "featured_image": {
                    "type": "(url)",
                    "description": "The URL to the featured image for this post if it has one."
                },
                "format": {
                    "type": "(string)",
                    "description": {
                        "standard": "Standard",
                        "aside": "Aside",
                        "chat": "Chat",
                        "gallery": "Gallery",
                        "link": "Link",
                        "image": "Image",
                        "quote": "Quote",
                        "status": "Status",
                        "video": "Video",
                        "audio": "Audio"
                    }
                },
                "geo": {
                    "type": "(object|false)",
                    "description": ""
                },
                "publicize_URLs": {
                    "type": "(array)",
                    "description": "Array of Twitter and Facebook URLs published by this post."
                },
                "tags": {
                    "type": "(object)",
                    "description": "Hash of tags (keyed by tag name) applied to the post."
                },
                "categories": {
                    "type": "(object)",
                    "description": "Hash of categories (keyed by category name) applied to the post."
                },
                "attachments": {
                    "type": "(object)",
                    "description": "Hash of post attachments (keyed by attachment ID)."
                },
                "metadata": {
                    "type": "(array)",
                    "description": "Array of post metadata keys and values. All unprotected meta keys are available by default for read requests. Both unprotected and protected meta keys are available for authenticated requests with access. Protected meta keys can be made available with the <code>rest_api_allowed_public_metadata</code> filter."
                },
                "meta": {
                    "type": "(object)",
                    "description": "API result meta data"
                }
            }
        }
    }, {
        "description": "Return a single Post (by name)",
        "method": "GET",
        "path_format": "/sites/%s/posts/name:%s",
        "path_labeled": "/sites/$site/posts/name:$post_name",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$post_name": {
                    "type": "(string)",
                    "description": "The post name (a.k.a. slug)"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "The post ID."
                },
                "site_ID": {
                    "type": "(int)",
                    "description": "The site ID."
                },
                "author": {
                    "type": "(object)",
                    "description": "The author of the post."
                },
                "date": {
                    "type": "(iso 8601 datetime)",
                    "description": "The post's creation time."
                },
                "modified": {
                    "type": "(iso 8601 datetime)",
                    "description": "The post's most recent update time."
                },
                "title": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "URL": {
                    "type": "(url)",
                    "description": "The full permalink URL to the post."
                },
                "short_URL": {
                    "type": "(url)",
                    "description": "The wp.me short URL."
                },
                "content": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "excerpt": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "slug": {
                    "type": "(string)",
                    "description": "The name (slug) for the post, used in URLs."
                },
                "guid": {
                    "type": "(string)",
                    "description": "The GUID for the post."
                },
                "status": {
                    "type": "(string)",
                    "description": {
                        "publish": "The post is published.",
                        "draft": "The post is saved as a draft.",
                        "pending": "The post is pending editorial approval.",
                        "future": "The post is scheduled for future publishing.",
                        "trash": "The post is in the trash."
                    }
                },
                "sticky": {
                    "type": "(bool)",
                    "description": "Is the post sticky?"
                },
                "password": {
                    "type": "(string)",
                    "description": "The plaintext password protecting the post, or, more likely, the empty string if the post is not password protected."
                },
                "parent": {
                    "type": "(object|false)",
                    "description": "A reference to the post's parent, if it has one."
                },
                "type": {
                    "type": "(string)",
                    "description": "The post's post_type. Post types besides post and page need to be whitelisted using the <code>rest_api_allowed_post_types</code> filter."
                },
                "comments_open": {
                    "type": "(bool)",
                    "description": "Is the post open for comments?"
                },
                "pings_open": {
                    "type": "(bool)",
                    "description": "Is the post open for pingbacks, trackbacks?"
                },
                "likes_enabled": {
                    "type": "(bool)",
                    "description": "Is the post open to likes?"
                },
                "sharing_enabled": {
                    "type": "(bool)",
                    "description": "Should sharing buttons show on this post?"
                },
                "gplusauthorship_enabled": {
                    "type": "(bool)",
                    "description": "Should a Google+ account be associated with this post?"
                },
                "comment_count": {
                    "type": "(int)",
                    "description": "The number of comments for this post."
                },
                "like_count": {
                    "type": "(int)",
                    "description": "The number of likes for this post."
                },
                "i_like": {
                    "type": "(bool)",
                    "description": "Does the current user like this post?"
                },
                "is_reblogged": {
                    "type": "(bool)",
                    "description": "Did the current user reblog this post?"
                },
                "is_following": {
                    "type": "(bool)",
                    "description": "Is the current user following this blog?"
                },
                "global_ID": {
                    "type": "(string)",
                    "description": "A unique WordPress.com-wide representation of a post."
                },
                "featured_image": {
                    "type": "(url)",
                    "description": "The URL to the featured image for this post if it has one."
                },
                "format": {
                    "type": "(string)",
                    "description": {
                        "standard": "Standard",
                        "aside": "Aside",
                        "chat": "Chat",
                        "gallery": "Gallery",
                        "link": "Link",
                        "image": "Image",
                        "quote": "Quote",
                        "status": "Status",
                        "video": "Video",
                        "audio": "Audio"
                    }
                },
                "geo": {
                    "type": "(object|false)",
                    "description": ""
                },
                "publicize_URLs": {
                    "type": "(array)",
                    "description": "Array of Twitter and Facebook URLs published by this post."
                },
                "tags": {
                    "type": "(object)",
                    "description": "Hash of tags (keyed by tag name) applied to the post."
                },
                "categories": {
                    "type": "(object)",
                    "description": "Hash of categories (keyed by category name) applied to the post."
                },
                "attachments": {
                    "type": "(object)",
                    "description": "Hash of post attachments (keyed by attachment ID)."
                },
                "metadata": {
                    "type": "(array)",
                    "description": "Array of post metadata keys and values. All unprotected meta keys are available by default for read requests. Both unprotected and protected meta keys are available for authenticated requests with access. Protected meta keys can be made available with the <code>rest_api_allowed_public_metadata</code> filter."
                },
                "meta": {
                    "type": "(object)",
                    "description": "API result meta data"
                }
            }
        }
    }, {
        "description": "Return a single Post (by slug)",
        "method": "GET",
        "path_format": "/sites/%s/posts/slug:%s",
        "path_labeled": "/sites/$site/posts/slug:$post_slug",
        "group": "posts",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$post_slug": {
                    "type": "(string)",
                    "description": "The post slug (a.k.a. sanitized name)"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "The post ID."
                },
                "site_ID": {
                    "type": "(int)",
                    "description": "The site ID."
                },
                "author": {
                    "type": "(object)",
                    "description": "The author of the post."
                },
                "date": {
                    "type": "(iso 8601 datetime)",
                    "description": "The post's creation time."
                },
                "modified": {
                    "type": "(iso 8601 datetime)",
                    "description": "The post's most recent update time."
                },
                "title": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "URL": {
                    "type": "(url)",
                    "description": "The full permalink URL to the post."
                },
                "short_URL": {
                    "type": "(url)",
                    "description": "The wp.me short URL."
                },
                "content": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "excerpt": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "slug": {
                    "type": "(string)",
                    "description": "The name (slug) for the post, used in URLs."
                },
                "guid": {
                    "type": "(string)",
                    "description": "The GUID for the post."
                },
                "status": {
                    "type": "(string)",
                    "description": {
                        "publish": "The post is published.",
                        "draft": "The post is saved as a draft.",
                        "pending": "The post is pending editorial approval.",
                        "future": "The post is scheduled for future publishing.",
                        "trash": "The post is in the trash."
                    }
                },
                "sticky": {
                    "type": "(bool)",
                    "description": "Is the post sticky?"
                },
                "password": {
                    "type": "(string)",
                    "description": "The plaintext password protecting the post, or, more likely, the empty string if the post is not password protected."
                },
                "parent": {
                    "type": "(object|false)",
                    "description": "A reference to the post's parent, if it has one."
                },
                "type": {
                    "type": "(string)",
                    "description": "The post's post_type. Post types besides post and page need to be whitelisted using the <code>rest_api_allowed_post_types</code> filter."
                },
                "comments_open": {
                    "type": "(bool)",
                    "description": "Is the post open for comments?"
                },
                "pings_open": {
                    "type": "(bool)",
                    "description": "Is the post open for pingbacks, trackbacks?"
                },
                "likes_enabled": {
                    "type": "(bool)",
                    "description": "Is the post open to likes?"
                },
                "sharing_enabled": {
                    "type": "(bool)",
                    "description": "Should sharing buttons show on this post?"
                },
                "gplusauthorship_enabled": {
                    "type": "(bool)",
                    "description": "Should a Google+ account be associated with this post?"
                },
                "comment_count": {
                    "type": "(int)",
                    "description": "The number of comments for this post."
                },
                "like_count": {
                    "type": "(int)",
                    "description": "The number of likes for this post."
                },
                "i_like": {
                    "type": "(bool)",
                    "description": "Does the current user like this post?"
                },
                "is_reblogged": {
                    "type": "(bool)",
                    "description": "Did the current user reblog this post?"
                },
                "is_following": {
                    "type": "(bool)",
                    "description": "Is the current user following this blog?"
                },
                "global_ID": {
                    "type": "(string)",
                    "description": "A unique WordPress.com-wide representation of a post."
                },
                "featured_image": {
                    "type": "(url)",
                    "description": "The URL to the featured image for this post if it has one."
                },
                "format": {
                    "type": "(string)",
                    "description": {
                        "standard": "Standard",
                        "aside": "Aside",
                        "chat": "Chat",
                        "gallery": "Gallery",
                        "link": "Link",
                        "image": "Image",
                        "quote": "Quote",
                        "status": "Status",
                        "video": "Video",
                        "audio": "Audio"
                    }
                },
                "geo": {
                    "type": "(object|false)",
                    "description": ""
                },
                "publicize_URLs": {
                    "type": "(array)",
                    "description": "Array of Twitter and Facebook URLs published by this post."
                },
                "tags": {
                    "type": "(object)",
                    "description": "Hash of tags (keyed by tag name) applied to the post."
                },
                "categories": {
                    "type": "(object)",
                    "description": "Hash of categories (keyed by category name) applied to the post."
                },
                "attachments": {
                    "type": "(object)",
                    "description": "Hash of post attachments (keyed by attachment ID)."
                },
                "metadata": {
                    "type": "(array)",
                    "description": "Array of post metadata keys and values. All unprotected meta keys are available by default for read requests. Both unprotected and protected meta keys are available for authenticated requests with access. Protected meta keys can be made available with the <code>rest_api_allowed_public_metadata</code> filter."
                },
                "meta": {
                    "type": "(object)",
                    "description": "API result meta data"
                }
            }
        }
    }, {
        "description": "Create a Post",
        "method": "POST",
        "path_format": "/sites/%s/posts/new",
        "path_labeled": "/sites/$site/posts/new",
        "group": "posts",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "date": {
                    "type": "(iso 8601 datetime)",
                    "description": "The post's creation time."
                },
                "title": {
                    "type": "(html)",
                    "description": "The post title."
                },
                "content": {
                    "type": "(html)",
                    "description": "The post content."
                },
                "excerpt": {
                    "type": "(html)",
                    "description": "An optional post excerpt."
                },
                "slug": {
                    "type": "(string)",
                    "description": "The name (slug) for the post, used in URLs."
                },
                "author": {
                    "type": "(string)",
                    "description": "The username or ID for the user to assign the post to."
                },
                "publicize": {
                    "type": "(array|bool)",
                    "description": "True or false if the post be publicized to external services. An array of services if we only want to publicize to a select few. Defaults to true."
                },
                "publicize_message": {
                    "type": "(string)",
                    "description": "Custom message to be publicized to external services."
                },
                "status": {
                    "type": "(string)",
                    "description": {
                        "publish": "(default) Publish the post.",
                        "private": "Privately publish the post.",
                        "draft": "Save the post as a draft.",
                        "pending": "Mark the post as pending editorial approval."
                    }
                },
                "sticky": {
                    "type": "(bool)",
                    "description": "Mark the post as sticky?"
                },
                "password": {
                    "type": "(string)",
                    "description": "The plaintext password protecting the post, or, more likely, the empty string if the post is not password protected."
                },
                "parent": {
                    "type": "(int)",
                    "description": "The post ID of the new post's parent."
                },
                "type": {
                    "type": "(string)",
                    "description": "The post type. Defaults to 'post'. Post types besides post and page need to be whitelisted using the <code>rest_api_allowed_post_types</code> filter."
                },
                "categories": {
                    "type": "(array|string)",
                    "description": "Comma separated list or array of categories (name or id)"
                },
                "tags": {
                    "type": "(array|string)",
                    "description": "Comma separated list or array of tags (name or id)"
                },
                "format": {
                    "type": "(string)",
                    "description": {
                        "standard": "(default) Standard",
                        "aside": "Aside",
                        "chat": "Chat",
                        "gallery": "Gallery",
                        "link": "Link",
                        "image": "Image",
                        "quote": "Quote",
                        "status": "Status",
                        "video": "Video",
                        "audio": "Audio"
                    }
                },
                "featured_image": {
                    "type": "(string)",
                    "description": "The post ID of an existing attachment to set as the featured image. Pass an empty string to delete the existing image."
                },
                "media": {
                    "type": "(media)",
                    "description": "An array of images to attach to the post. To upload media, the entire request should be multipart/form-data encoded.  Multiple media items will be displayed in a gallery.  Accepts images (image/gif, image/jpeg, image/png) only.<br /><br /><strong>Example</strong>:<br /><code>curl \\<br />--form 'title=Image' \\<br />--form 'media[]=@/path/to/file.jpg' \\<br />-H 'Authorization: BEARER your-token' \\<br />'https://public-api.wordpress.com/rest/v1/sites/123/posts/new'</code>"
                },
                "media_urls": {
                    "type": "(array)",
                    "description": "An array of URLs for images to attach to a post. Sideloads the media in for a post."
                },
                "metadata": {
                    "type": "(array)",
                    "description": "Array of metadata objects containing the following properties: `key` (metadata key), `id` (meta ID), `previous_value` (if set, the action will only occur for the provided previous value), `value` (the new value to set the meta to), `operation` (the operation to perform: `update` or `add`; defaults to `update`). All unprotected meta keys are available by default for read requests. Both unprotected and protected meta keys are avaiable for authenticated requests with proper capabilities. Protected meta keys can be made available with the <code>rest_api_allowed_public_metadata</code> filter."
                },
                "comments_open": {
                    "type": "(bool)",
                    "description": "Should the post be open to comments?  Defaults to the blog's preference."
                },
                "pings_open": {
                    "type": "(bool)",
                    "description": "Should the post be open to comments?  Defaults to the blog's preference."
                },
                "likes_enabled": {
                    "type": "(bool)",
                    "description": "Should the post be open to likes?  Defaults to the blog's preference."
                },
                "sharing_enabled": {
                    "type": "(bool)",
                    "description": "Should sharing buttons show on this post?  Defaults to true."
                },
                "gplusauthorship_enabled": {
                    "type": "(bool)",
                    "description": "Should a Google+ account be associated with this post?  Defaults to true."
                }
            }
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "The post ID."
                },
                "site_ID": {
                    "type": "(int)",
                    "description": "The site ID."
                },
                "author": {
                    "type": "(object)",
                    "description": "The author of the post."
                },
                "date": {
                    "type": "(iso 8601 datetime)",
                    "description": "The post's creation time."
                },
                "modified": {
                    "type": "(iso 8601 datetime)",
                    "description": "The post's most recent update time."
                },
                "title": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "URL": {
                    "type": "(url)",
                    "description": "The full permalink URL to the post."
                },
                "short_URL": {
                    "type": "(url)",
                    "description": "The wp.me short URL."
                },
                "content": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "excerpt": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "slug": {
                    "type": "(string)",
                    "description": "The name (slug) for the post, used in URLs."
                },
                "guid": {
                    "type": "(string)",
                    "description": "The GUID for the post."
                },
                "status": {
                    "type": "(string)",
                    "description": {
                        "publish": "The post is published.",
                        "draft": "The post is saved as a draft.",
                        "pending": "The post is pending editorial approval.",
                        "future": "The post is scheduled for future publishing.",
                        "trash": "The post is in the trash."
                    }
                },
                "sticky": {
                    "type": "(bool)",
                    "description": "Is the post sticky?"
                },
                "password": {
                    "type": "(string)",
                    "description": "The plaintext password protecting the post, or, more likely, the empty string if the post is not password protected."
                },
                "parent": {
                    "type": "(object|false)",
                    "description": "A reference to the post's parent, if it has one."
                },
                "type": {
                    "type": "(string)",
                    "description": "The post's post_type. Post types besides post and page need to be whitelisted using the <code>rest_api_allowed_post_types</code> filter."
                },
                "comments_open": {
                    "type": "(bool)",
                    "description": "Is the post open for comments?"
                },
                "pings_open": {
                    "type": "(bool)",
                    "description": "Is the post open for pingbacks, trackbacks?"
                },
                "likes_enabled": {
                    "type": "(bool)",
                    "description": "Is the post open to likes?"
                },
                "sharing_enabled": {
                    "type": "(bool)",
                    "description": "Should sharing buttons show on this post?"
                },
                "gplusauthorship_enabled": {
                    "type": "(bool)",
                    "description": "Should a Google+ account be associated with this post?"
                },
                "comment_count": {
                    "type": "(int)",
                    "description": "The number of comments for this post."
                },
                "like_count": {
                    "type": "(int)",
                    "description": "The number of likes for this post."
                },
                "i_like": {
                    "type": "(bool)",
                    "description": "Does the current user like this post?"
                },
                "is_reblogged": {
                    "type": "(bool)",
                    "description": "Did the current user reblog this post?"
                },
                "is_following": {
                    "type": "(bool)",
                    "description": "Is the current user following this blog?"
                },
                "global_ID": {
                    "type": "(string)",
                    "description": "A unique WordPress.com-wide representation of a post."
                },
                "featured_image": {
                    "type": "(url)",
                    "description": "The URL to the featured image for this post if it has one."
                },
                "format": {
                    "type": "(string)",
                    "description": {
                        "standard": "Standard",
                        "aside": "Aside",
                        "chat": "Chat",
                        "gallery": "Gallery",
                        "link": "Link",
                        "image": "Image",
                        "quote": "Quote",
                        "status": "Status",
                        "video": "Video",
                        "audio": "Audio"
                    }
                },
                "geo": {
                    "type": "(object|false)",
                    "description": ""
                },
                "publicize_URLs": {
                    "type": "(array)",
                    "description": "Array of Twitter and Facebook URLs published by this post."
                },
                "tags": {
                    "type": "(object)",
                    "description": "Hash of tags (keyed by tag name) applied to the post."
                },
                "categories": {
                    "type": "(object)",
                    "description": "Hash of categories (keyed by category name) applied to the post."
                },
                "attachments": {
                    "type": "(object)",
                    "description": "Hash of post attachments (keyed by attachment ID)."
                },
                "metadata": {
                    "type": "(array)",
                    "description": "Array of post metadata keys and values. All unprotected meta keys are available by default for read requests. Both unprotected and protected meta keys are available for authenticated requests with access. Protected meta keys can be made available with the <code>rest_api_allowed_public_metadata</code> filter."
                },
                "meta": {
                    "type": "(object)",
                    "description": "API result meta data"
                }
            }
        }
    }, {
        "description": "Delete a Post. Note: If the post object is of type post or page and the trash is enabled, this request will send the post to the trash. A second request will permanently delete the post.",
        "method": "POST",
        "path_format": "/sites/%s/posts/%d/delete",
        "path_labeled": "/sites/$site/posts/$post_ID/delete",
        "group": "posts",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$post_ID": {
                    "type": "(int)",
                    "description": "The post ID"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "The post ID."
                },
                "site_ID": {
                    "type": "(int)",
                    "description": "The site ID."
                },
                "author": {
                    "type": "(object)",
                    "description": "The author of the post."
                },
                "date": {
                    "type": "(iso 8601 datetime)",
                    "description": "The post's creation time."
                },
                "modified": {
                    "type": "(iso 8601 datetime)",
                    "description": "The post's most recent update time."
                },
                "title": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "URL": {
                    "type": "(url)",
                    "description": "The full permalink URL to the post."
                },
                "short_URL": {
                    "type": "(url)",
                    "description": "The wp.me short URL."
                },
                "content": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "excerpt": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "slug": {
                    "type": "(string)",
                    "description": "The name (slug) for the post, used in URLs."
                },
                "guid": {
                    "type": "(string)",
                    "description": "The GUID for the post."
                },
                "status": {
                    "type": "(string)",
                    "description": {
                        "publish": "The post is published.",
                        "draft": "The post is saved as a draft.",
                        "pending": "The post is pending editorial approval.",
                        "future": "The post is scheduled for future publishing.",
                        "trash": "The post is in the trash.",
                        "deleted": "The post has been deleted permanently."
                    }
                },
                "sticky": {
                    "type": "(bool)",
                    "description": "Is the post sticky?"
                },
                "password": {
                    "type": "(string)",
                    "description": "The plaintext password protecting the post, or, more likely, the empty string if the post is not password protected."
                },
                "parent": {
                    "type": "(object|false)",
                    "description": "A reference to the post's parent, if it has one."
                },
                "type": {
                    "type": "(string)",
                    "description": "The post's post_type. Post types besides post and page need to be whitelisted using the <code>rest_api_allowed_post_types</code> filter."
                },
                "comments_open": {
                    "type": "(bool)",
                    "description": "Is the post open for comments?"
                },
                "pings_open": {
                    "type": "(bool)",
                    "description": "Is the post open for pingbacks, trackbacks?"
                },
                "likes_enabled": {
                    "type": "(bool)",
                    "description": "Is the post open to likes?"
                },
                "sharing_enabled": {
                    "type": "(bool)",
                    "description": "Should sharing buttons show on this post?"
                },
                "gplusauthorship_enabled": {
                    "type": "(bool)",
                    "description": "Should a Google+ account be associated with this post?"
                },
                "comment_count": {
                    "type": "(int)",
                    "description": "The number of comments for this post."
                },
                "like_count": {
                    "type": "(int)",
                    "description": "The number of likes for this post."
                },
                "i_like": {
                    "type": "(bool)",
                    "description": "Does the current user like this post?"
                },
                "is_reblogged": {
                    "type": "(bool)",
                    "description": "Did the current user reblog this post?"
                },
                "is_following": {
                    "type": "(bool)",
                    "description": "Is the current user following this blog?"
                },
                "global_ID": {
                    "type": "(string)",
                    "description": "A unique WordPress.com-wide representation of a post."
                },
                "featured_image": {
                    "type": "(url)",
                    "description": "The URL to the featured image for this post if it has one."
                },
                "format": {
                    "type": "(string)",
                    "description": {
                        "standard": "Standard",
                        "aside": "Aside",
                        "chat": "Chat",
                        "gallery": "Gallery",
                        "link": "Link",
                        "image": "Image",
                        "quote": "Quote",
                        "status": "Status",
                        "video": "Video",
                        "audio": "Audio"
                    }
                },
                "geo": {
                    "type": "(object|false)",
                    "description": ""
                },
                "publicize_URLs": {
                    "type": "(array)",
                    "description": "Array of Twitter and Facebook URLs published by this post."
                },
                "tags": {
                    "type": "(object)",
                    "description": "Hash of tags (keyed by tag name) applied to the post."
                },
                "categories": {
                    "type": "(object)",
                    "description": "Hash of categories (keyed by category name) applied to the post."
                },
                "attachments": {
                    "type": "(object)",
                    "description": "Hash of post attachments (keyed by attachment ID)."
                },
                "metadata": {
                    "type": "(array)",
                    "description": "Array of post metadata keys and values. All unprotected meta keys are available by default for read requests. Both unprotected and protected meta keys are available for authenticated requests with access. Protected meta keys can be made available with the <code>rest_api_allowed_public_metadata</code> filter."
                },
                "meta": {
                    "type": "(object)",
                    "description": "API result meta data"
                }
            }
        }
    }, {
        "description": "Return the media library",
        "method": "GET",
        "path_format": "/sites/%s/media/",
        "path_labeled": "/sites/$site/media/",
        "group": "media",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "number": {
                    "type": "(int)",
                    "description": "The number of media items to return.  Limit: 100. Default: 20."
                },
                "offset": {
                    "type": "(int)",
                    "description": "0-indexed offset."
                },
                "parent_id": {
                    "type": "(int)",
                    "description": "Default is nothing. The post where the media item is attached. Passing nothing shows all media items. 0 shows unattached media items."
                },
                "mime_type": {
                    "type": "(string)",
                    "description": "Default is nothing. Filter by mime type (e.g., 'image/jpeg', 'application/pdf'"
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "media": {
                    "type": "(array)",
                    "description": "Array of media"
                },
                "found": {
                    "type": "(int)",
                    "description": "The number of total results found"
                }
            }
        }
    }, {
        "description": "Return a single media item (by ID)",
        "method": "GET",
        "path_format": "/sites/%s/media/%d",
        "path_labeled": "/sites/$site/media/$media_ID",
        "group": "media",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$media_ID": {
                    "type": "(int)",
                    "description": "The ID of the media item"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "id": {
                    "type": "(int)",
                    "description": "The ID of the media item"
                },
                "date": {
                    "type": "(iso 8601 datetime)",
                    "description": "The date the media was uploaded"
                },
                "parent": {
                    "type": "(int)",
                    "description": "ID of the post this media is attached to"
                },
                "link": {
                    "type": "(string)",
                    "description": "URL to the file"
                },
                "title": {
                    "type": "(string)",
                    "description": "File name"
                },
                "caption": {
                    "type": "(string)",
                    "description": "User provided caption of the file"
                },
                "description": {
                    "type": "(string)",
                    "description": "Description of the file"
                },
                "metadata": {
                    "type": "(array)",
                    "description": "Misc array of information about the file, such as exif data or sizes"
                }
            }
        }
    }, {
        "description": "Edit basic information about a media item",
        "method": "POST",
        "path_format": "/sites/%s/media/%d",
        "path_labeled": "/sites/$site/media/$media_ID",
        "group": "media",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$media_ID": {
                    "type": "(int)",
                    "description": "The ID of the media item"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "title": {
                    "type": "(string)",
                    "description": "The file name."
                },
                "caption": {
                    "type": "(string)",
                    "description": "File caption."
                },
                "description": {
                    "type": "(html)",
                    "description": "Description of the file."
                }
            }
        },
        "response": {
            "body": {
                "id": {
                    "type": "(int)",
                    "description": "The ID of the media item"
                },
                "date": {
                    "type": "(iso 8601 datetime)",
                    "description": "The date the media was uploaded"
                },
                "parent": {
                    "type": "(int)",
                    "description": "ID of the post this media is attached to"
                },
                "link": {
                    "type": "(string)",
                    "description": "URL to the file"
                },
                "title": {
                    "type": "(string)",
                    "description": "File name"
                },
                "caption": {
                    "type": "(string)",
                    "description": "User provided caption of the file"
                },
                "description": {
                    "type": "(string)",
                    "description": "Description of the file"
                },
                "metadata": {
                    "type": "(array)",
                    "description": "Misc array of information about the file, such as exif data or sizes"
                }
            }
        }
    }, {
        "description": "Upload a new piece of media",
        "method": "POST",
        "path_format": "/sites/%s/media/new",
        "path_labeled": "/sites/$site/media/new",
        "group": "media",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "media": {
                    "type": "(media)",
                    "description": "An array of media to attach to the post. To upload media, the entire request should be multipart/form-data encoded.  Accepts images (image/gif, image/jpeg, image/png) only at this time.<br /><br /><strong>Example</strong>:<br /><code>curl \\<br />--form 'files[]=@/path/to/file.jpg' \\<br />-H 'Authorization: BEARER your-token' \\<br />'https://public-api.wordpress.com/rest/v1/sites/123/media/new'</code>"
                },
                "media_urls": {
                    "type": "(array)",
                    "description": "An array of URLs to upload to the post."
                }
            }
        },
        "response": {
            "body": {
                "media": {
                    "type": "(array)",
                    "description": "Array of uploaded media"
                }
            }
        }
    }, {
        "description": "Delete a piece of media",
        "method": "POST",
        "path_format": "/sites/%s/media/%d/delete",
        "path_labeled": "/sites/$site/media/$media_ID/delete",
        "group": "media",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$media_ID": {
                    "type": "(int)",
                    "description": "The media ID"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "status": {
                    "type": "(string)",
                    "description": "Returns deleted if the media was successfully deleted"
                },
                "id": {
                    "type": "(int)",
                    "description": "The ID of the media item"
                },
                "date": {
                    "type": "(iso 8601 datetime)",
                    "description": "The date the media was uploaded"
                },
                "parent": {
                    "type": "(int)",
                    "description": "ID of the post this media is attached to"
                },
                "link": {
                    "type": "(string)",
                    "description": "URL to the file"
                },
                "title": {
                    "type": "(string)",
                    "description": "File name"
                },
                "caption": {
                    "type": "(string)",
                    "description": "User provided caption of the file"
                },
                "description": {
                    "type": "(string)",
                    "description": "Description of the file"
                },
                "metadata": {
                    "type": "(array)",
                    "description": "Misc array of information about the file, such as exif data or sizes"
                }
            }
        }
    }, {
        "description": "Return recent Comments",
        "method": "GET",
        "path_format": "/sites/%s/comments/",
        "path_labeled": "/sites/$site/comments/",
        "group": "comments",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "number": {
                    "type": "(int)",
                    "description": "The number of comments to return.  Limit: 100. Default: 20."
                },
                "offset": {
                    "type": "(int)",
                    "description": "0-indexed offset."
                },
                "page": {
                    "type": "(int)",
                    "description": "Return the Nth 1-indexed page of comments.  Takes precedence over the <code>offset</code> parameter."
                },
                "order": {
                    "type": "(string)",
                    "description": {
                        "DESC": "(default) Return comments in descending order from newest to oldest.",
                        "ASC": "Return comments in ascending order from oldest to newest."
                    }
                },
                "after": {
                    "type": "(iso 8601 datetime)",
                    "description": "Return comments dated on or after the specified datetime."
                },
                "before": {
                    "type": "(iso 8601 datetime)",
                    "description": "Return comments dated on or before the specified datetime."
                },
                "type": {
                    "type": "(string)",
                    "description": {
                        "any": "(default) Return all comments regardless of type.",
                        "comment": "Return only regular comments.",
                        "trackback": "Return only trackbacks.",
                        "pingback": "Return only pingbacks.",
                        "pings": "Return both trackbacks and pingbacks."
                    }
                },
                "status": {
                    "type": "(string)",
                    "description": {
                        "approved": "(default) Return only approved comments.",
                        "unapproved": "Return only comments in the moderation queue.",
                        "spam": "Return only comments marked as spam.",
                        "trash": "Return only comments in the trash.",
                        "all": "Return comments of all statuses."
                    }
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "found": {
                    "type": "(int)",
                    "description": "The total number of comments found that match the request (ignoring limits, offsets, and pagination)."
                },
                "comments": {
                    "type": "(array)",
                    "description": "An array of comment objects."
                }
            }
        }
    }, {
        "description": "Return recent Comments for a Post",
        "method": "GET",
        "path_format": "/sites/%s/posts/%d/replies/",
        "path_labeled": "/sites/$site/posts/$post_ID/replies/",
        "group": "comments",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$post_ID": {
                    "type": "(int)",
                    "description": "The post ID"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "number": {
                    "type": "(int)",
                    "description": "The number of comments to return.  Limit: 100. Default: 20."
                },
                "offset": {
                    "type": "(int)",
                    "description": "0-indexed offset."
                },
                "page": {
                    "type": "(int)",
                    "description": "Return the Nth 1-indexed page of comments.  Takes precedence over the <code>offset</code> parameter."
                },
                "order": {
                    "type": "(string)",
                    "description": {
                        "DESC": "(default) Return comments in descending order from newest to oldest.",
                        "ASC": "Return comments in ascending order from oldest to newest."
                    }
                },
                "after": {
                    "type": "(iso 8601 datetime)",
                    "description": "Return comments dated on or after the specified datetime."
                },
                "before": {
                    "type": "(iso 8601 datetime)",
                    "description": "Return comments dated on or before the specified datetime."
                },
                "type": {
                    "type": "(string)",
                    "description": {
                        "any": "(default) Return all comments regardless of type.",
                        "comment": "Return only regular comments.",
                        "trackback": "Return only trackbacks.",
                        "pingback": "Return only pingbacks.",
                        "pings": "Return both trackbacks and pingbacks."
                    }
                },
                "status": {
                    "type": "(string)",
                    "description": {
                        "approved": "(default) Return only approved comments.",
                        "unapproved": "Return only comments in the moderation queue.",
                        "spam": "Return only comments marked as spam.",
                        "trash": "Return only comments in the trash.",
                        "all": "Return comments of all statuses."
                    }
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "found": {
                    "type": "(int)",
                    "description": "The total number of comments found that match the request (ignoring limits, offsets, and pagination)."
                },
                "comments": {
                    "type": "(array)",
                    "description": "An array of comment objects."
                }
            }
        }
    }, {
        "description": "Return a single Comment",
        "method": "GET",
        "path_format": "/sites/%s/comments/%d",
        "path_labeled": "/sites/$site/comments/$comment_ID",
        "group": "comments",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$comment_ID": {
                    "type": "(int)",
                    "description": "The comment ID"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "The comment ID."
                },
                "post": {
                    "type": "(object)",
                    "description": "A reference to the comment's post."
                },
                "author": {
                    "type": "(object)",
                    "description": "The author of the comment."
                },
                "date": {
                    "type": "(iso 8601 datetime)",
                    "description": "The comment's creation time."
                },
                "URL": {
                    "type": "(url)",
                    "description": "The full permalink URL to the comment."
                },
                "short_URL": {
                    "type": "(url)",
                    "description": "The wp.me short URL."
                },
                "content": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "status": {
                    "type": "(string)",
                    "description": {
                        "approved": "The comment has been approved.",
                        "unapproved": "The comment has been held for review in the moderation queue.",
                        "spam": "The comment has been marked as spam.",
                        "trash": "The comment is in the trash."
                    }
                },
                "parent": {
                    "type": "(object|false)",
                    "description": "A reference to the comment's parent, if it has one."
                },
                "type": {
                    "type": "(string)",
                    "description": {
                        "comment": "The comment is a regular comment.",
                        "trackback": "The comment is a trackback.",
                        "pingback": "The comment is a pingback."
                    }
                },
                "meta": {
                    "type": "(object)",
                    "description": "Meta data"
                }
            }
        }
    }, {
        "description": "Edit a Comment",
        "method": "POST",
        "path_format": "/sites/%s/comments/%d",
        "path_labeled": "/sites/$site/comments/$comment_ID",
        "group": "comments",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$comment_ID": {
                    "type": "(int)",
                    "description": "The comment ID"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "date": {
                    "type": "(iso 8601 datetime)",
                    "description": "The comment's creation time."
                },
                "content": {
                    "type": "(html)",
                    "description": "The comment text."
                },
                "status": {
                    "type": "(string)",
                    "description": {
                        "approved": "(default) Approve the comment.",
                        "unapproved": "Remove the comment from public view and send it to the moderation queue.",
                        "spam": "Mark the comment as spam.",
                        "unspam": "Unmark the comment as spam. Will attempt to set it to the previous status.",
                        "trash": "Send a comment to the trash if trashing is enabled (see constant: EMPTY_TRASH_DAYS).",
                        "untrash": "Untrash a comment. Only works when the comment is in the trash."
                    }
                }
            }
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "The comment ID."
                },
                "post": {
                    "type": "(object)",
                    "description": "A reference to the comment's post."
                },
                "author": {
                    "type": "(object)",
                    "description": "The author of the comment."
                },
                "date": {
                    "type": "(iso 8601 datetime)",
                    "description": "The comment's creation time."
                },
                "URL": {
                    "type": "(url)",
                    "description": "The full permalink URL to the comment."
                },
                "short_URL": {
                    "type": "(url)",
                    "description": "The wp.me short URL."
                },
                "content": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "status": {
                    "type": "(string)",
                    "description": {
                        "approved": "The comment has been approved.",
                        "unapproved": "The comment has been held for review in the moderation queue.",
                        "spam": "The comment has been marked as spam.",
                        "trash": "The comment is in the trash."
                    }
                },
                "parent": {
                    "type": "(object|false)",
                    "description": "A reference to the comment's parent, if it has one."
                },
                "type": {
                    "type": "(string)",
                    "description": {
                        "comment": "The comment is a regular comment.",
                        "trackback": "The comment is a trackback.",
                        "pingback": "The comment is a pingback."
                    }
                },
                "meta": {
                    "type": "(object)",
                    "description": "Meta data"
                }
            }
        }
    }, {
        "description": "Create a Comment on a Post",
        "method": "POST",
        "path_format": "/sites/%s/posts/%d/replies/new",
        "path_labeled": "/sites/$site/posts/$post_ID/replies/new",
        "group": "comments",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$post_ID": {
                    "type": "(int)",
                    "description": "The post ID"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "content": {
                    "type": "(html)",
                    "description": "The comment text."
                }
            }
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "The comment ID."
                },
                "post": {
                    "type": "(object)",
                    "description": "A reference to the comment's post."
                },
                "author": {
                    "type": "(object)",
                    "description": "The author of the comment."
                },
                "date": {
                    "type": "(iso 8601 datetime)",
                    "description": "The comment's creation time."
                },
                "URL": {
                    "type": "(url)",
                    "description": "The full permalink URL to the comment."
                },
                "short_URL": {
                    "type": "(url)",
                    "description": "The wp.me short URL."
                },
                "content": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "status": {
                    "type": "(string)",
                    "description": {
                        "approved": "The comment has been approved.",
                        "unapproved": "The comment has been held for review in the moderation queue.",
                        "spam": "The comment has been marked as spam.",
                        "trash": "The comment is in the trash."
                    }
                },
                "parent": {
                    "type": "(object|false)",
                    "description": "A reference to the comment's parent, if it has one."
                },
                "type": {
                    "type": "(string)",
                    "description": {
                        "comment": "The comment is a regular comment.",
                        "trackback": "The comment is a trackback.",
                        "pingback": "The comment is a pingback."
                    }
                },
                "meta": {
                    "type": "(object)",
                    "description": "Meta data"
                }
            }
        }
    }, {
        "description": "Create a Comment as a reply to another Comment",
        "method": "POST",
        "path_format": "/sites/%s/comments/%d/replies/new",
        "path_labeled": "/sites/$site/comments/$comment_ID/replies/new",
        "group": "comments",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$comment_ID": {
                    "type": "(int)",
                    "description": "The comment ID"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "content": {
                    "type": "(html)",
                    "description": "The comment text."
                }
            }
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "The comment ID."
                },
                "post": {
                    "type": "(object)",
                    "description": "A reference to the comment's post."
                },
                "author": {
                    "type": "(object)",
                    "description": "The author of the comment."
                },
                "date": {
                    "type": "(iso 8601 datetime)",
                    "description": "The comment's creation time."
                },
                "URL": {
                    "type": "(url)",
                    "description": "The full permalink URL to the comment."
                },
                "short_URL": {
                    "type": "(url)",
                    "description": "The wp.me short URL."
                },
                "content": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "status": {
                    "type": "(string)",
                    "description": {
                        "approved": "The comment has been approved.",
                        "unapproved": "The comment has been held for review in the moderation queue.",
                        "spam": "The comment has been marked as spam.",
                        "trash": "The comment is in the trash."
                    }
                },
                "parent": {
                    "type": "(object|false)",
                    "description": "A reference to the comment's parent, if it has one."
                },
                "type": {
                    "type": "(string)",
                    "description": {
                        "comment": "The comment is a regular comment.",
                        "trackback": "The comment is a trackback.",
                        "pingback": "The comment is a pingback."
                    }
                },
                "meta": {
                    "type": "(object)",
                    "description": "Meta data"
                }
            }
        }
    }, {
        "description": "Delete a Comment",
        "method": "POST",
        "path_format": "/sites/%s/comments/%d/delete",
        "path_labeled": "/sites/$site/comments/$comment_ID/delete",
        "group": "comments",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$comment_ID": {
                    "type": "(int)",
                    "description": "The comment ID"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "The comment ID."
                },
                "post": {
                    "type": "(object)",
                    "description": "A reference to the comment's post."
                },
                "author": {
                    "type": "(object)",
                    "description": "The author of the comment."
                },
                "date": {
                    "type": "(iso 8601 datetime)",
                    "description": "The comment's creation time."
                },
                "URL": {
                    "type": "(url)",
                    "description": "The full permalink URL to the comment."
                },
                "short_URL": {
                    "type": "(url)",
                    "description": "The wp.me short URL."
                },
                "content": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "status": {
                    "type": "(string)",
                    "description": {
                        "approved": "The comment has been approved.",
                        "unapproved": "The comment has been held for review in the moderation queue.",
                        "spam": "The comment has been marked as spam.",
                        "trash": "The comment is in the trash.",
                        "deleted": "The comment has been deleted permanently."
                    }
                },
                "parent": {
                    "type": "(object|false)",
                    "description": "A reference to the comment's parent, if it has one."
                },
                "type": {
                    "type": "(string)",
                    "description": {
                        "comment": "The comment is a regular comment.",
                        "trackback": "The comment is a trackback.",
                        "pingback": "The comment is a pingback."
                    }
                },
                "meta": {
                    "type": "(object)",
                    "description": "Meta data"
                }
            }
        }
    }, {
        "description": "Returns information on a single Category",
        "method": "GET",
        "path_format": "/sites/%s/categories/slug:%s",
        "path_labeled": "/sites/$site/categories/slug:$category",
        "group": "taxonomy",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$category": {
                    "type": "(string)",
                    "description": "The category slug"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "The category ID."
                },
                "name": {
                    "type": "(string)",
                    "description": "The name of the category."
                },
                "slug": {
                    "type": "(string)",
                    "description": "The slug of the category."
                },
                "description": {
                    "type": "(string)",
                    "description": "The description of the category."
                },
                "post_count": {
                    "type": "(int)",
                    "description": "The number of posts using this category."
                },
                "parent": {
                    "type": "(int)",
                    "description": "The parent ID for the category."
                },
                "meta": {
                    "type": "(object)",
                    "description": "Meta data"
                }
            }
        }
    }, {
        "description": "Edit a Category",
        "method": "POST",
        "path_format": "/sites/%s/categories/slug:%s",
        "path_labeled": "/sites/$site/categories/slug:$category",
        "group": "taxonomy",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$category": {
                    "type": "(string)",
                    "description": "The category slug"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "name": {
                    "type": "(string)",
                    "description": "Name of the category"
                },
                "description": {
                    "type": "(string)",
                    "description": "A description of the category"
                },
                "parent": {
                    "type": "(id)",
                    "description": "ID of the parent category"
                }
            }
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "The category ID."
                },
                "name": {
                    "type": "(string)",
                    "description": "The name of the category."
                },
                "slug": {
                    "type": "(string)",
                    "description": "The slug of the category."
                },
                "description": {
                    "type": "(string)",
                    "description": "The description of the category."
                },
                "post_count": {
                    "type": "(int)",
                    "description": "The number of posts using this category."
                },
                "parent": {
                    "type": "(int)",
                    "description": "The parent ID for the category."
                },
                "meta": {
                    "type": "(object)",
                    "description": "Meta data"
                }
            }
        }
    }, {
        "description": "Returns a list of a site's categories",
        "method": "GET",
        "path_format": "/sites/%s/categories",
        "path_labeled": "/sites/$site/categories",
        "group": "taxonomy",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "found": {
                    "type": "(int)",
                    "description": "The number of categories returned."
                },
                "categories": {
                    "type": "(array)",
                    "description": "Array of category objects."
                }
            }
        }
    }, {
        "description": "Returns a list of a site's tags",
        "method": "GET",
        "path_format": "/sites/%s/tags",
        "path_labeled": "/sites/$site/tags",
        "group": "taxonomy",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "found": {
                    "type": "(int)",
                    "description": "The number of tags returned."
                },
                "tags": {
                    "type": "(array)",
                    "description": "Array of tag objects."
                }
            }
        }
    }, {
        "description": "Returns information on a single Tag",
        "method": "GET",
        "path_format": "/sites/%s/tags/slug:%s",
        "path_labeled": "/sites/$site/tags/slug:$tag",
        "group": "taxonomy",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$tag": {
                    "type": "(string)",
                    "description": "The tag slug"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "The tag ID."
                },
                "name": {
                    "type": "(string)",
                    "description": "The name of the tag."
                },
                "slug": {
                    "type": "(string)",
                    "description": "The slug of the tag."
                },
                "description": {
                    "type": "(string)",
                    "description": "The description of the tag."
                },
                "post_count": {
                    "type": "(int)",
                    "description": "The number of posts using this t."
                },
                "meta": {
                    "type": "(object)",
                    "description": "Meta data"
                }
            }
        }
    }, {
        "description": "Edit a Tag",
        "method": "POST",
        "path_format": "/sites/%s/tags/slug:%s",
        "path_labeled": "/sites/$site/tags/slug:$tag",
        "group": "taxonomy",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$tag": {
                    "type": "(string)",
                    "description": "The tag slug"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "name": {
                    "type": "(string)",
                    "description": "Name of the tag"
                },
                "description": {
                    "type": "(string)",
                    "description": "A description of the tag"
                }
            }
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "The tag ID."
                },
                "name": {
                    "type": "(string)",
                    "description": "The name of the tag."
                },
                "slug": {
                    "type": "(string)",
                    "description": "The slug of the tag."
                },
                "description": {
                    "type": "(string)",
                    "description": "The description of the tag."
                },
                "post_count": {
                    "type": "(int)",
                    "description": "The number of posts using this t."
                },
                "meta": {
                    "type": "(object)",
                    "description": "Meta data"
                }
            }
        }
    }, {
        "description": "Create a new Category",
        "method": "POST",
        "path_format": "/sites/%s/categories/new",
        "path_labeled": "/sites/$site/categories/new",
        "group": "taxonomy",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "name": {
                    "type": "(string)",
                    "description": "Name of the category"
                },
                "description": {
                    "type": "(string)",
                    "description": "A description of the category"
                },
                "parent": {
                    "type": "(id)",
                    "description": "ID of the parent category"
                }
            }
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "The category ID."
                },
                "name": {
                    "type": "(string)",
                    "description": "The name of the category."
                },
                "slug": {
                    "type": "(string)",
                    "description": "The slug of the category."
                },
                "description": {
                    "type": "(string)",
                    "description": "The description of the category."
                },
                "post_count": {
                    "type": "(int)",
                    "description": "The number of posts using this category."
                },
                "parent": {
                    "type": "(int)",
                    "description": "The parent ID for the category."
                },
                "meta": {
                    "type": "(object)",
                    "description": "Meta data"
                }
            }
        }
    }, {
        "description": "Create a new Tag",
        "method": "POST",
        "path_format": "/sites/%s/tags/new",
        "path_labeled": "/sites/$site/tags/new",
        "group": "taxonomy",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "name": {
                    "type": "(string)",
                    "description": "Name of the tag"
                },
                "description": {
                    "type": "(string)",
                    "description": "A description of the tag"
                }
            }
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "The tag ID."
                },
                "name": {
                    "type": "(string)",
                    "description": "The name of the tag."
                },
                "slug": {
                    "type": "(string)",
                    "description": "The slug of the tag."
                },
                "description": {
                    "type": "(string)",
                    "description": "The description of the tag."
                },
                "post_count": {
                    "type": "(int)",
                    "description": "The number of posts using this t."
                },
                "meta": {
                    "type": "(object)",
                    "description": "Meta data"
                }
            }
        }
    }, {
        "description": "Delete a Category",
        "method": "POST",
        "path_format": "/sites/%s/categories/slug:%s/delete",
        "path_labeled": "/sites/$site/categories/slug:$category/delete",
        "group": "taxonomy",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$category": {
                    "type": "(string)",
                    "description": "The category slug"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "The category ID."
                },
                "name": {
                    "type": "(string)",
                    "description": "The name of the category."
                },
                "slug": {
                    "type": "(string)",
                    "description": "The slug of the category."
                },
                "description": {
                    "type": "(string)",
                    "description": "The description of the category."
                },
                "post_count": {
                    "type": "(int)",
                    "description": "The number of posts using this category."
                },
                "parent": {
                    "type": "(int)",
                    "description": "The parent ID for the category."
                },
                "meta": {
                    "type": "(object)",
                    "description": "Meta data"
                }
            }
        }
    }, {
        "description": "Delete a Tag",
        "method": "POST",
        "path_format": "/sites/%s/tags/slug:%s/delete",
        "path_labeled": "/sites/$site/tags/slug:$tag/delete",
        "group": "taxonomy",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$tag": {
                    "type": "(string)",
                    "description": "The tag slug"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "The tag ID."
                },
                "name": {
                    "type": "(string)",
                    "description": "The name of the tag."
                },
                "slug": {
                    "type": "(string)",
                    "description": "The slug of the tag."
                },
                "description": {
                    "type": "(string)",
                    "description": "The description of the tag."
                },
                "post_count": {
                    "type": "(int)",
                    "description": "The number of posts using this t."
                },
                "meta": {
                    "type": "(object)",
                    "description": "Meta data"
                }
            }
        }
    }, {
        "description": "List the Users of a blog",
        "method": "GET",
        "path_format": "/sites/%s/users",
        "path_labeled": "/sites/$site/users",
        "group": "users",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "number": {
                    "type": "(int)",
                    "description": "Limit the total number of authors returned. Default: 20."
                },
                "offset": {
                    "type": "(int)",
                    "description": "The first n authors to be skipped in the returned array."
                },
                "order": {
                    "type": "(string)",
                    "description": {
                        "DESC": "(default) Return authors in descending order.",
                        "ASC": "Return authors in ascending order."
                    }
                },
                "order_by": {
                    "type": "(string)",
                    "description": {
                        "ID": "(default) Order by ID (default).",
                        "login": "Order by username.",
                        "nicename": "Order by nicename.",
                        "email": "Order by author email address.",
                        "url": "Order by author URL.",
                        "registered": "Order by registered date.",
                        "display_name": "Order by display name.",
                        "post_count": "Order by number of posts published."
                    }
                },
                "authors_only": {
                    "type": "(bool)",
                    "description": "Set to true to fetch authors only"
                },
                "type": {
                    "type": "(string)",
                    "description": "Specify the post type to query authors for. Only works when combined with the `authors_only` flag. Defaults to 'post'. Post types besides post and page need to be whitelisted using the <code>rest_api_allowed_post_types</code> filter."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "found": {
                    "type": "(int)",
                    "description": "The total number of authors found that match the request (ignoring limits and offsets)."
                },
                "users": {
                    "type": "(array)",
                    "description": "Array of user objects"
                },
                "authors": {
                    "type": "(array)",
                    "description": "Array of author objects."
                }
            }
        }
    }, {
        "description": "User Info Endpoint for IFTTT (tests authentication)",
        "method": "GET",
        "path_format": "/ifttt/v1/user/info",
        "path_labeled": "/ifttt/v1/user/info",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": []
        }
    }, {
        "description": "Status Endpoint for IFTTT (tests authentication)",
        "method": "GET",
        "path_format": "/ifttt/v1/status",
        "path_labeled": "/ifttt/v1/status",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": []
        }
    }, {
        "description": "Create New Post Endpoint for IFTTT",
        "method": "POST",
        "path_format": "/ifttt/v1/actions/create-new-post",
        "path_labeled": "/ifttt/v1/actions/create-new-post",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "actionFields": {
                    "type": "(array)",
                    "description": "ifttt"
                }
            }
        },
        "response": {
            "body": {
                "data": {
                    "type": "(array)",
                    "description": "ifttt"
                }
            }
        }
    }, {
        "description": "Create New Photo Post Endpoint for IFTTT",
        "method": "POST",
        "path_format": "/ifttt/v1/actions/create-new-photo-post",
        "path_labeled": "/ifttt/v1/actions/create-new-photo-post",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "actionFields": {
                    "type": "(array)",
                    "description": "ifttt"
                }
            }
        },
        "response": {
            "body": {
                "data": {
                    "type": "(array)",
                    "description": "ifttt"
                }
            }
        }
    }, {
        "description": "Create New Comment Endpoint for IFTTT",
        "method": "POST",
        "path_format": "/ifttt/v1/actions/create-new-comment",
        "path_labeled": "/ifttt/v1/actions/create-new-comment",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "actionFields": {
                    "type": "(array)",
                    "description": "ifttt"
                }
            }
        },
        "response": {
            "body": {
                "data": {
                    "type": "(array)",
                    "description": "ifttt"
                }
            }
        }
    }, {
        "description": "Follow Blog Endpoint for IFTTT",
        "method": "POST",
        "path_format": "/ifttt/v1/actions/follow-blog",
        "path_labeled": "/ifttt/v1/actions/follow-blog",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "actionFields": {
                    "type": "(array)",
                    "description": "ifttt"
                }
            }
        },
        "response": {
            "body": {
                "data": {
                    "type": "(array)",
                    "description": "ifttt"
                }
            }
        }
    }, {
        "description": "Created New Post Trigger Endpoint for IFTTT",
        "method": "POST",
        "path_format": "/ifttt/v1/triggers/any-new-post",
        "path_labeled": "/ifttt/v1/triggers/any-new-post",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "triggerFields": {
                    "type": "(array)",
                    "description": "ifttt"
                }
            }
        },
        "response": {
            "body": {
                "data": {
                    "type": "(array)",
                    "description": "ifttt"
                }
            }
        }
    }, {
        "description": "Dynamic Post Formats Endpoint for IFTTT",
        "method": "POST",
        "path_format": "/ifttt/v1/actions/create-new-post/fields/format/options",
        "path_labeled": "/ifttt/v1/actions/create-new-post/fields/format/options",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "triggerFields": {
                    "type": "(array)",
                    "description": "ifttt"
                }
            }
        },
        "response": {
            "body": {
                "data": {
                    "type": "(array)",
                    "description": "ifttt"
                }
            }
        }
    }, {
        "description": "FreshlyPressed Trigger Endpoint for IFTTT",
        "method": "POST",
        "path_format": "/ifttt/v1/triggers/freshly-pressed",
        "path_labeled": "/ifttt/v1/triggers/freshly-pressed",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "triggerFields": {
                    "type": "(array)",
                    "description": "ifttt"
                }
            }
        },
        "response": {
            "body": {
                "data": {
                    "type": "(array)",
                    "description": "ifttt"
                }
            }
        }
    }, {
        "description": "New Follower Trigger Endpoint for IFTTT",
        "method": "POST",
        "path_format": "/ifttt/v1/triggers/new-follower",
        "path_labeled": "/ifttt/v1/triggers/new-follower",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "triggerFields": {
                    "type": "(array)",
                    "description": "ifttt"
                }
            }
        },
        "response": {
            "body": {
                "data": {
                    "type": "(array)",
                    "description": "ifttt"
                }
            }
        }
    }, {
        "description": "New Comment Trigger Endpoint for IFTTT",
        "method": "POST",
        "path_format": "/ifttt/v1/triggers/new-comment",
        "path_labeled": "/ifttt/v1/triggers/new-comment",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "triggerFields": {
                    "type": "(array)",
                    "description": "ifttt"
                }
            }
        },
        "response": {
            "body": {
                "data": {
                    "type": "(array)",
                    "description": "ifttt"
                }
            }
        }
    }, {
        "description": "A list of the current user's groups",
        "method": "GET",
        "path_format": "/me/groups",
        "path_labeled": "/me/groups",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "groups": {
                    "type": "(array)",
                    "description": "List of groups"
                }
            }
        }
    }, {
        "description": "Details for a group",
        "method": "GET",
        "path_format": "/groups/%d",
        "path_labeled": "/groups/$group_id",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$group_id": {
                    "type": "(none)",
                    "description": ""
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "group": {
                    "type": "(object)",
                    "description": "Group details"
                }
            }
        }
    }, {
        "description": "Edit a group",
        "method": "POST",
        "path_format": "/groups/%d",
        "path_labeled": "/groups/$group_id",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$group_id": {
                    "type": "(none)",
                    "description": ""
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "name": {
                    "type": "(string)",
                    "description": "The name of the group"
                },
                "description": {
                    "type": "(string)",
                    "description": "The long form description of the group (optional)"
                }
            }
        },
        "response": {
            "body": {
                "group": {
                    "type": "(object)",
                    "description": "Group details"
                }
            }
        }
    }, {
        "description": "Create a new group",
        "method": "POST",
        "path_format": "/groups/new",
        "path_labeled": "/groups/new",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "name": {
                    "type": "(string)",
                    "description": "The name of the group"
                },
                "description": {
                    "type": "(string)",
                    "description": "The long form description of the group (optional)"
                }
            }
        },
        "response": {
            "body": {
                "group": {
                    "type": "(object)",
                    "description": "Group details"
                }
            }
        }
    }, {
        "description": "Delete a group",
        "method": "POST",
        "path_format": "/groups/%d/delete",
        "path_labeled": "/groups/$group_id/delete",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$group_id": {
                    "type": "(none)",
                    "description": ""
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "deleted": {
                    "type": "(bool)",
                    "description": "Confirmation that the group has been deleted"
                }
            }
        }
    }, {
        "description": "Retrieve a list of sites in a Group",
        "method": "GET",
        "path_format": "/groups/%d/sites",
        "path_labeled": "/groups/$group_id/sites",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$group_id": {
                    "type": "(none)",
                    "description": ""
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "sites": {
                    "type": "(array)",
                    "description": "An array of sites in the group"
                }
            }
        }
    }, {
        "description": "Add a site to a group",
        "method": "POST",
        "path_format": "/groups/%d/sites/new",
        "path_labeled": "/groups/$group_id/sites/new",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$group_id": {
                    "type": "(none)",
                    "description": ""
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "site_id": {
                    "type": "(int)",
                    "description": "The ID of the site to be added"
                },
                "skip_bulk_indexing": {
                    "type": "(bool)",
                    "description": "Optional.  Skips Elasticsearch bulk indexing.  Default false."
                }
            }
        },
        "response": {
            "body": {
                "added": {
                    "type": "(bool)",
                    "description": "Returns true if the site was added to the group"
                }
            }
        }
    }, {
        "description": "Delete a site from a group",
        "method": "POST",
        "path_format": "/groups/%d/sites/%d/delete",
        "path_labeled": "/groups/$group_id/sites/$site_id/delete",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$group_id": {
                    "type": "(none)",
                    "description": ""
                },
                "$site_id": {
                    "type": "(none)",
                    "description": ""
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "deleted": {
                    "type": "(bool)",
                    "description": "Confirmation that the site has been removed from the group"
                }
            }
        }
    }, {
        "description": "Returns a list of users in the group",
        "method": "GET",
        "path_format": "/groups/%d/users",
        "path_labeled": "/groups/$group_id/users",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$group_id": {
                    "type": "(none)",
                    "description": ""
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "global": {
                    "type": "(array)",
                    "description": "An array of users with access to all sites"
                },
                "local": {
                    "type": "(object)",
                    "description": "Arrays of users who only have access to specific sites, keyed by site_id"
                }
            }
        }
    }, {
        "description": "Add a user to a group",
        "method": "POST",
        "path_format": "/groups/%d/users/new",
        "path_labeled": "/groups/$group_id/users/new",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$group_id": {
                    "type": "(none)",
                    "description": ""
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "user_id": {
                    "type": "(int)",
                    "description": "The ID of the user to be added"
                }
            }
        },
        "response": {
            "body": {
                "added": {
                    "type": "(bool)",
                    "description": "Confirmation that the user has been added to the group"
                }
            }
        }
    }, {
        "description": "Remove a user from a group",
        "method": "POST",
        "path_format": "/groups/%d/users/%d/delete",
        "path_labeled": "/groups/$group_id/users/$user_id/delete",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$group_id": {
                    "type": "(none)",
                    "description": ""
                },
                "$user_id": {
                    "type": "(none)",
                    "description": ""
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "deleted": {
                    "type": "(bool)",
                    "description": "Confirmation that the user has been removed from the group"
                }
            }
        }
    }, {
        "description": "*** NOTE: ENDPOINT IN FLUX*** Returns posts across blogs in the group",
        "method": "GET",
        "path_format": "/groups/%d/posts",
        "path_labeled": "/groups/$group_id/posts",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$group_id": {
                    "type": "(none)",
                    "description": ""
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "before": {
                    "type": "(iso 8601 datetime)",
                    "description": "Return posts picked on or before the specified datetime."
                },
                "before_gmt": {
                    "type": "(iso 8601 datetime)",
                    "description": "Return posts picked on or before the specified datetime."
                },
                "number": {
                    "type": "(int)",
                    "description": "The number of posts to return. Limit: 100. Default: 20."
                },
                "offset": {
                    "type": "(int)",
                    "description": "0-indexed offset. Default: 0."
                },
                "page": {
                    "type": "(int)",
                    "description": "Return the Nth 1-indexed page of posts. Takes precedence over the offset parameter. Default: 1."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "posts": {
                    "type": "(array)",
                    "description": "An array of posts"
                }
            }
        }
    }, {
        "description": "Finds a list of possible users to suggest for @mentions",
        "method": "GET",
        "path_format": "/users/suggest",
        "path_labeled": "/users/suggest",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "site_id": {
                    "type": "(int)",
                    "description": "The site ID to look for matching users on."
                },
                "site": {
                    "type": "(string)",
                    "description": "The domain to look for matching users on. (Overrides site_id.)"
                },
                "post_id": {
                    "type": "(int)",
                    "description": "Optional. A single post to use for mentions. This includes registered users who have commented on the post."
                },
                "filter": {
                    "type": "(string)",
                    "description": "Optional. A string to filter possible users against."
                },
                "image_size": {
                    "type": "(int)",
                    "description": "Optional.  The size of the image to return in pixels.  (Default 96, mininum 1, maximum 2048.)"
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "suggestions": {
                    "type": "(array)",
                    "description": "A list of matching users."
                }
            }
        }
    }, {
        "description": "A list stats/metrics/insights that the provided developer token has access to.",
        "method": "GET",
        "path_format": "/insights",
        "path_labeled": "/insights",
        "group": "insights",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "name": {
                    "type": "(string)",
                    "description": "Name of WordPress.com Application"
                },
                "id": {
                    "type": "(id)",
                    "description": "Unique ID for a WordPress.com Application"
                },
                "insights": {
                    "type": "(array)",
                    "description": "List metrics"
                },
                "today": {
                    "type": "(array)",
                    "description": "A list of todays metrics"
                },
                "has_custom": {
                    "type": "(bool)",
                    "description": "If a report has custom (whitelisted) stats"
                }
            }
        }
    }, {
        "description": "Raw data for a particular graph.",
        "method": "GET",
        "path_format": "/insights/%s",
        "path_labeled": "/insights/$slug",
        "group": "insights",
        "request": {
            "path": {
                "$slug": {
                    "type": "(string)",
                    "description": "Report slug (rest-api-calls, rest-api-writes, etc). If a slash is present, it must be urlencoded."
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "unit": {
                    "type": "(string)",
                    "description": "By default, weekly stats are provided in the data array. You can also pass daily, monthly, or cumulative to get totals for different time periods."
                },
                "after": {
                    "type": "(int)",
                    "description": "Return data only since the specified UNIX time."
                },
                "before": {
                    "type": "(int)",
                    "description": "Return data collected on or before the specified UNIX time."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "points": {
                    "type": "(int)",
                    "description": "The number of data points returned."
                },
                "data": {
                    "type": "(array)",
                    "description": "Numbers of actions by time stamp."
                },
                "summaries": {
                    "type": "(array)",
                    "description": "Summary for the current day/week/monthly/yearly/decade including % change."
                },
                "started_tracking": {
                    "type": "(string)",
                    "description": "The date stats began collecting."
                }
            }
        }
    }, {
        "description": "A list of the current user's connections to third-party services.",
        "method": "GET",
        "path_format": "/me/connections",
        "path_labeled": "/me/connections",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "service": {
                    "type": "(string)",
                    "description": "Get connections for a specific service only. Default is 'all' but you can enter 'facebook', 'twitter', etc."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "connections": {
                    "type": "(array)",
                    "description": "List of connections"
                }
            }
        }
    }, {
        "description": "Returns information about a specific connection.",
        "method": "GET",
        "path_format": "/me/connections/%d",
        "path_labeled": "/me/connections/$connection_id",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$connection_id": {
                    "type": "(none)",
                    "description": ""
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "Identifier for the connection"
                },
                "service": {
                    "type": "(string)",
                    "description": "An identifier for the type of service (facebook, linkedin, path, tumblr, etc)"
                },
                "label": {
                    "type": "(string)",
                    "description": "Formatted nicename for the service."
                },
                "issued": {
                    "type": "(iso 8601 datetime)",
                    "description": "When the conncetion was created"
                },
                "expires": {
                    "type": "(iso 8601 datetime)",
                    "description": "When the connection expires and needs to be refreshed"
                },
                "external_ID": {
                    "type": "(string)",
                    "description": "An identifier for the user on the third-party service"
                },
                "external_name": {
                    "type": "(string)",
                    "description": "Usually a username or login name."
                },
                "external_display": {
                    "type": "(string)",
                    "description": "How the user prefers their name to be displayed on the third-party service."
                },
                "URL": {
                    "type": "(string|null)",
                    "description": "URL to the user's profile. NULL if there is no URL to link to."
                },
                "status": {
                    "type": "(string)",
                    "description": "The current status of the connection. \"ok\" for connections with no problems, and \"broken\" for connections that need fixed."
                },
                "refresh_url": {
                    "type": "(string)",
                    "description": "The URL to refresh a token if it is broken."
                }
            }
        }
    }, {
        "description": "Totally disconnect a user's connection",
        "method": "POST",
        "path_format": "/me/connections/%d/delete",
        "path_labeled": "/me/connections/$connection_id/delete",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$connection_id": {
                    "type": "(none)",
                    "description": ""
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "Identifier for the connection"
                },
                "deleted": {
                    "type": "(bool)",
                    "description": "Confirmation that the connection has been removed"
                }
            }
        }
    }, {
        "description": "A list of third-party services that WordPress.com can integrate with.",
        "method": "GET",
        "path_format": "/meta/keyring/",
        "path_labeled": "/meta/keyring/",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "services": {
                    "type": "(array)",
                    "description": "List of supported services"
                }
            }
        }
    }, {
        "description": "A single third-party service that WordPress.com can integrate with.",
        "method": "GET",
        "path_format": "/meta/keyring/%s",
        "path_labeled": "/meta/keyring/$service",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$service": {
                    "type": "(none)",
                    "description": ". See /meta/keyring/ for list of supported services."
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "label": {
                    "type": "(string)",
                    "description": "Display friendly name for the service."
                },
                "description": {
                    "type": "(string)",
                    "description": "Explanation of what the intergration with this service does."
                },
                "noticon": {
                    "type": "(string)",
                    "description": "Class name for the noticon icon."
                },
                "icon": {
                    "type": "(string)",
                    "description": "2x PNG of the icon if noticons cannot be used."
                },
                "screenshots": {
                    "type": "(array)",
                    "description": "An array of screenshots showing a preview of the integration."
                },
                "connect": {
                    "type": "(string)",
                    "description": "The URL for connecting a new Keyring connection."
                }
            }
        }
    }, {
        "description": "A list of a site's current Publicize connections to third-party services for the current user (personal or shared).",
        "method": "GET",
        "path_format": "/sites/%s/connections/",
        "path_labeled": "/sites/$site/connections/",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "service": {
                    "type": "(string)",
                    "description": "Get Publicize connections for a specific service only. Default is 'all' but you can enter 'facebook', 'twitter', etc."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "connections": {
                    "type": "(array)",
                    "description": "List of Publicize connections"
                }
            }
        }
    }, {
        "description": "Returns information about a specific Publicize connection.",
        "method": "GET",
        "path_format": "/sites/%s/connections/%d",
        "path_labeled": "/sites/$site/connections/$connection_id",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$connection_id": {
                    "type": "(int)",
                    "description": "The ID of the Publicize connection"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "Identifier for the Publicize connection"
                },
                "token_ID": {
                    "type": "(int)",
                    "description": "Identifier for the Keyring token"
                },
                "site_ID": {
                    "type": "(int)",
                    "description": "Identifier for the Site"
                },
                "shared": {
                    "type": "(bool)",
                    "description": "Whether this connection is specific to the current user, or a shared one for the site."
                },
                "service": {
                    "type": "(string)",
                    "description": "An identifier for the type of service (facebook, linkedin, path, tumblr, etc)"
                },
                "label": {
                    "type": "(string)",
                    "description": "Formatted nicename for the service."
                },
                "issued": {
                    "type": "(iso 8601 datetime)",
                    "description": "When the conncetion was created"
                },
                "expires": {
                    "type": "(iso 8601 datetime)",
                    "description": "When the connection expires and needs to be refreshed"
                },
                "external_ID": {
                    "type": "(string)",
                    "description": "An identifier for the user on the third-party service"
                },
                "external_name": {
                    "type": "(string)",
                    "description": "Usually a username or login name."
                },
                "external_display": {
                    "type": "(string)",
                    "description": "How the user prefers their name to be displayed on the third-party service."
                },
                "URL": {
                    "type": "(string|null)",
                    "description": "URL to the user's profile. NULL if there is no URL to link to."
                },
                "status": {
                    "type": "(string)",
                    "description": "The current status of the connection. \"ok\" for connections with no problems, and \"broken\" for connections that need fixed."
                },
                "refresh_url": {
                    "type": "(string)",
                    "description": "The URL to refresh a token if it is broken."
                },
                "meta": {
                    "type": "(object)",
                    "description": "Extra and optional meta data for the current Publicize connection"
                }
            }
        }
    }, {
        "description": "Delete a publicize connection",
        "method": "POST",
        "path_format": "/sites/%s/connections/%d/delete",
        "path_labeled": "/sites/$site/connections/$connection_id/delete",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$connection_id": {
                    "type": "(none)",
                    "description": ""
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "Identifier for the connection"
                },
                "deleted": {
                    "type": "(bool)",
                    "description": "Confirmation that the connection has been removed"
                }
            }
        }
    }, {
        "description": "A list of third-party services that WordPress.com can publish content to.",
        "method": "GET",
        "path_format": "/meta/publicize/",
        "path_labeled": "/meta/publicize/",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "services": {
                    "type": "(array)",
                    "description": "List of supported services"
                }
            }
        }
    }, {
        "description": "A single third-party service that WordPress.com can publish content to.",
        "method": "GET",
        "path_format": "/meta/publicize/%s",
        "path_labeled": "/meta/publicize/$service",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$service": {
                    "type": "(none)",
                    "description": ". See /meta/publicize/ for list of supported services."
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "label": {
                    "type": "(string)",
                    "description": "Display friendly name for the service."
                },
                "description": {
                    "type": "(string)",
                    "description": "Explanation of what the intergration with this service does."
                },
                "noticon": {
                    "type": "(string)",
                    "description": "Class name for the noticon icon."
                },
                "icon": {
                    "type": "(string)",
                    "description": "2x PNG of the icon if noticons cannot be used."
                },
                "screenshots": {
                    "type": "(array)",
                    "description": "An array of screenshots showing a preview of the integration."
                },
                "connect": {
                    "type": "(string)",
                    "description": "The URL for connecting a new Keyring connection."
                }
            }
        }
    }, {
        "description": "Suggests domain names that are available for registration based on a given term or domain name",
        "method": "GET",
        "path_format": "/domains/suggestions",
        "path_labeled": "/domains/suggestions",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "query": {
                    "type": "(string)",
                    "description": "Term (e.g \"flowers\") or domain name (e.g. \"flowers.com\") to search alternative domain names from"
                },
                "quantity": {
                    "type": "(int)",
                    "description": "Maximum number of suggestions to return (limited to 10) Default: 5."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "suggestions": {
                    "type": "(array)",
                    "description": "List of domain names available for registration"
                }
            }
        }
    }, {
        "description": "List all domains belonging to a given site.",
        "method": "GET",
        "path_format": "/sites/%s/domains/",
        "path_labeled": "/sites/$site/domains/",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "domains": {
                    "type": "(array)",
                    "description": "List of domains on the site"
                }
            }
        }
    }, {
        "description": "Gets the Primary domain for a site.",
        "method": "GET",
        "path_format": "/sites/%s/domains/primary",
        "path_labeled": "/sites/$site/domains/primary",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "success": {
                    "type": "(string)",
                    "description": "The primary domain for a site."
                }
            }
        }
    }, {
        "description": "Sets the Primary domain for a site.",
        "method": "POST",
        "path_format": "/sites/%s/domains/primary",
        "path_labeled": "/sites/$site/domains/primary",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "domain": {
                    "type": "(string)",
                    "description": "The domain to set as primary."
                }
            }
        },
        "response": {
            "body": {
                "success": {
                    "type": "(bool)",
                    "description": "Was the operation successful?"
                }
            }
        }
    }, {
        "description": "Checks if domain name is available",
        "method": "GET",
        "path_format": "/domains/%s/is-available",
        "path_labeled": "/domains/$domain/is-available",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$domain": {
                    "type": "(string)",
                    "description": "The domain to check"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "is-available": {
                    "type": "(bool)",
                    "description": "The domain is available"
                },
                "cost": {
                    "type": "(string)",
                    "description": "The cost to register the domain (including mapping)"
                }
            }
        }
    }, {
        "description": "Returns a list of upgrades for a user",
        "method": "GET",
        "path_format": "/me/upgrades/",
        "path_labeled": "/me/upgrades/",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": [{
                "type": "(none)",
                "description": ""
            }
            ]
        }
    }, {
        "description": "The list of themes a VIP has access to.",
        "method": "GET",
        "path_format": "/vip-themes",
        "path_labeled": "/vip-themes",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "themes": {
                    "type": "(array)",
                    "description": "The themes the VIP has access to."
                }
            }
        }
    }, {
        "description": "Information for a VIP theme",
        "method": "GET",
        "path_format": "/vip-themes/%s",
        "path_labeled": "/vip-themes/$slug",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$slug": {
                    "type": "(none)",
                    "description": ""
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "$slug": {
                    "type": "(none)",
                    "description": ""
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "slug": {
                    "type": "(string)",
                    "description": "The themes' slug."
                },
                "access": {
                    "type": "(string)",
                    "description": "The access the current user has to the theme."
                }
            }
        }
    }, {
        "description": "Lists VIP sites the user has access to",
        "method": "GET",
        "path_format": "/vip-sites",
        "path_labeled": "/vip-sites",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "sites": {
                    "type": "(array)",
                    "description": "An array of VIP sites the user has access to."
                }
            }
        }
    }, {
        "description": "Generates a package to clone a VIP site",
        "method": "GET",
        "path_format": "/vip-sites/%d/clone",
        "path_labeled": "/vip-sites/$site/clone",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$site": {
                    "type": "(integer)",
                    "description": "The number of the site to clone."
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "destination_url": {
                    "type": "(string)",
                    "description": "The destination url of the clone. Required."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "complete": {
                    "type": "(bool)",
                    "description": "Whether the package is complete"
                },
                "package": {
                    "type": "(string)",
                    "description": "The URL to download the package from"
                },
                "key": {
                    "type": "(string)",
                    "description": "The packages pre-shared key"
                }
            }
        }
    }, {
        "description": "Sends a message to an Automattic IRC channel or user.",
        "method": "POST",
        "path_format": "/internal/irc",
        "path_labeled": "/internal/irc",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "channel": {
                    "type": "(string)",
                    "description": "Either the channel name (prefixed with #) or the user to send the message to."
                },
                "message": {
                    "type": "(string)",
                    "description": "The message to send to the channel or user."
                },
                "botname": {
                    "type": "(string)",
                    "description": "An optional name for the bot to use. You should probably prefix with \"a8c-\" for consistency."
                }
            }
        },
        "response": {
            "body": {
                "ok": {
                    "type": "(int)",
                    "description": "Whether the message was successfully sent to the bot or not. Note that this does not necessarily mean that the message actually made it through to IRC."
                }
            }
        }
    }, {
        "description": "Sends a message to an Automattic Slack channel or user.",
        "method": "POST",
        "path_format": "/internal/slack",
        "path_labeled": "/internal/slack",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "channel": {
                    "type": "(string)",
                    "description": "The name of the channel to send the message to."
                },
                "message": {
                    "type": "(string)",
                    "description": "The message to send to the channel."
                },
                "botname": {
                    "type": "(string)",
                    "description": "An optional name for the bot to use. Defaults to \"Automattic Bot\"."
                },
                "avatar": {
                    "type": "(url)",
                    "description": "An optional URL to an avatar image to use for the bot. Defaults to the Automattic logo."
                },
                "emoji_avatar": {
                    "type": "(string)",
                    "description": "The Slack emjoi/smilie code to use for the avatar, complete with colons."
                }
            }
        },
        "response": {
            "body": {
                "ok": {
                    "type": "(int)",
                    "description": "Whether the message was successfully displayed in the channel or not."
                },
                "timestamp": {
                    "type": "(int)",
                    "description": "The timestamp of the message."
                },
                "error": {
                    "type": "(string)",
                    "description": "If an error occurred on Slack's side, this will be error code. See https://api.slack.com/methods/chat.postMessage"
                }
            }
        }
    }, {
        "description": "Check for updates to your downloaded WordPress.com themes",
        "method": "POST",
        "path_format": "/themes/update-check",
        "path_labeled": "/themes/update-check",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "updates": {
                    "type": "(array)",
                    "description": "Available updates"
                }
            }
        }
    }, {
        "description": "Get WordPress.com Themes allowed on your blog",
        "method": "GET",
        "path_format": "/sites/%s/themes",
        "path_labeled": "/sites/$site/themes",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "sort": {
                    "type": "(string)",
                    "description": "Sort themes by trending, newest, or popular Default: 'trending'."
                },
                "limit": {
                    "type": "(int)",
                    "description": "Limit the number of themes returned. 0 for no limits."
                },
                "offset": {
                    "type": "(int)",
                    "description": "0-indexed offset. Useful for pagination."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "found": {
                    "type": "(int)",
                    "description": "The total number of themes found."
                },
                "themes": {
                    "type": "(array)",
                    "description": "An array of theme objects."
                }
            }
        }
    }, {
        "description": "Get the active theme of your blog",
        "method": "GET",
        "path_format": "/sites/%s/themes/mine",
        "path_labeled": "/sites/$site/themes/mine",
        "group": "themes",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "id": {
                    "type": "(string)",
                    "description": "The theme's ID.</code>."
                },
                "screenshot": {
                    "type": "(string)",
                    "description": "A theme screenshot URL"
                },
                "name": {
                    "type": "(string)",
                    "description": "The name of the theme."
                },
                "description": {
                    "type": "(string)",
                    "description": "A description of the theme."
                },
                "tags": {
                    "type": "(array)",
                    "description": "Tags indicating styles and features of the theme."
                },
                "price": {
                    "type": "(float)",
                    "description": "The price, in USD, of the theme."
                }
            }
        }
    }, {
        "description": "Change the active theme of your blog",
        "method": "POST",
        "path_format": "/sites/%s/themes/mine",
        "path_labeled": "/sites/$site/themes/mine",
        "group": "themes",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                }
            },
            "query": {
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "theme": {
                    "type": "(string)",
                    "description": "The ID of the theme that should be activated"
                }
            }
        },
        "response": {
            "body": {
                "id": {
                    "type": "(string)",
                    "description": "The theme's ID."
                },
                "screenshot": {
                    "type": "(string)",
                    "description": "A theme screenshot URL"
                },
                "name": {
                    "type": "(string)",
                    "description": "The name of the theme."
                },
                "description": {
                    "type": "(string)",
                    "description": "A description of the theme."
                },
                "tags": {
                    "type": "(array)",
                    "description": "Tags indicating styles and features of the theme."
                }
            }
        }
    }, {
        "description": "Get WordPress.com Themes",
        "method": "GET",
        "path_format": "/themes",
        "path_labeled": "/themes",
        "group": "themes",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "sort": {
                    "type": "(string)",
                    "description": "Sort themes by trending, newest, or popular Default: 'trending'."
                },
                "limit": {
                    "type": "(int)",
                    "description": "Limit the number of themes returned. 0 for no limits."
                },
                "offset": {
                    "type": "(int)",
                    "description": "0-indexed offset. Useful for pagination."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "found": {
                    "type": "(int)",
                    "description": "The total number of themes found."
                },
                "themes": {
                    "type": "(array)",
                    "description": "An array of theme objects."
                }
            }
        }
    }, {
        "description": "Get a WordPress.com Theme",
        "method": "GET",
        "path_format": "/themes/theme:%s",
        "path_labeled": "/themes/theme:$theme_slug",
        "group": "themes",
        "request": {
            "path": {
                "$theme_slug": {
                    "type": "(string)",
                    "description": "The slug of the theme."
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "id": {
                    "type": "(string)",
                    "description": "The theme's ID.</code>."
                },
                "screenshot": {
                    "type": "(string)",
                    "description": "A theme screenshot URL"
                },
                "version": {
                    "type": "(string)",
                    "description": "The current theme version, following Semantic Versioning."
                },
                "download_url": {
                    "type": "(string|null)",
                    "description": "The link to a zip file where you can download the current version of the theme. NULL if not available for download."
                },
                "trending_rank": {
                    "type": "(int)",
                    "description": "The rank of the theme compared to all other themes on WordPress.com."
                },
                "popularity_rank": {
                    "type": "(int)",
                    "description": "The popularity of a theme compared to all other themes on WordPress.com."
                },
                "launch_date": {
                    "type": "(string)",
                    "description": "When the theme was launched. YYYY-MM-DD format."
                },
                "name": {
                    "type": "(string)",
                    "description": "The name of the theme."
                },
                "description": {
                    "type": "(string)",
                    "description": "A description of the theme."
                },
                "tags": {
                    "type": "(array)",
                    "description": "Tags indicating styles and features of the theme."
                }
            }
        }
    }, {
        "description": "Get a WordPress.com Theme, in a zip file",
        "method": "GET",
        "path_format": "/themes/download/%s.zip",
        "path_labeled": "/themes/download/$theme_slug.zip",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$theme_slug": {
                    "type": "(string)",
                    "description": "The slug of the theme."
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "version": {
                    "type": "(string)",
                    "description": "An optional theme version. Leave empty for the latest version"
                }
            },
            "body": []
        },
        "response": {
            "body": []
        }
    }, {
        "description": "Meta data about auth token's User",
        "method": "GET",
        "path_format": "/me",
        "path_labeled": "/me",
        "group": "users",
        "request": {
            "path": [],
            "query": {
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "Numeric user ID"
                },
                "display_name": {
                    "type": "(string)",
                    "description": "The name to display for a user"
                },
                "username": {
                    "type": "(string)",
                    "description": "Login name of a user"
                },
                "email": {
                    "type": "(string)",
                    "description": "Email address"
                },
                "primary_blog": {
                    "type": "(int)",
                    "description": "ID of a user's primary blog"
                },
                "language": {
                    "type": "(string)",
                    "description": "User language setting"
                },
                "token_site_id": {
                    "type": "(int)",
                    "description": "ID of the user's site that the current token provides access to"
                },
                "avatar_URL": {
                    "type": "(url)",
                    "description": "Gravatar image URL"
                },
                "profile_URL": {
                    "type": "(url)",
                    "description": "Gravatar Profile URL"
                },
                "verified": {
                    "type": "(boolean)",
                    "description": "Whether the email address has been verified"
                },
                "meta": {
                    "type": "(object)",
                    "description": "Meta data"
                }
            }
        }
    }, {
        "description": "A list of the current user's enabled WPCOM flags, which client applications can use to determine access to product features",
        "method": "GET",
        "path_format": "/me/flags",
        "path_labeled": "/me/flags",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "flags": {
                    "type": "(array)",
                    "description": "List of flags"
                }
            }
        }
    }, {
        "description": "A list of the current user's sites",
        "method": "GET",
        "path_format": "/me/sites",
        "path_labeled": "/me/sites",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "sites": {
                    "type": "(array)",
                    "description": "List of sites"
                }
            }
        }
    }, {
        "description": "*** NOTE: ENDPOINT IN FLUX*** A list of posts from the user's blogs. The current implementation of this endpoint is only temporary and will be rewritten to make use of elasticsearch after we backfill the necessary data.",
        "method": "GET",
        "path_format": "/me/posts",
        "path_labeled": "/me/posts",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "number": {
                    "type": "(int)",
                    "description": "The number of posts to return.  Limit: 100. Default: 20."
                },
                "column": {
                    "type": "(string)",
                    "description": "The column to use for before/after/range queries."
                },
                "offset": {
                    "type": "(int)",
                    "description": "0-indexed offset."
                },
                "page": {
                    "type": "(int)",
                    "description": "Return the Nth 1-indexed page of posts.  Takes precedence over the <code>offset</code> parameter."
                },
                "order": {
                    "type": "(string)",
                    "description": {
                        "DESC": "(default) Return posts in descending order.  For dates, that means newest to oldest.",
                        "ASC": "Return posts in ascending order.  For dates, that means oldest to newest."
                    }
                },
                "order_by": {
                    "type": "(string)",
                    "description": {
                        "date": "(default) Order by the created time of each post.",
                        "modified": "Order by the modified time of each post.",
                        "title": "Order lexicographically by the posts' titles.",
                        "comment_count": "Order by the number of comments for each post.",
                        "ID": "Order by post ID."
                    }
                },
                "after": {
                    "type": "(iso 8601 datetime)",
                    "description": "Return posts dated on or after the specified datetime."
                },
                "before": {
                    "type": "(iso 8601 datetime)",
                    "description": "Return posts dated on or before the specified datetime."
                },
                "tag": {
                    "type": "(string)",
                    "description": "Specify the tag name or slug."
                },
                "category": {
                    "type": "(string)",
                    "description": "Specify the category name or slug."
                },
                "type": {
                    "type": "(string)",
                    "description": "Specify the post type. Defaults to 'post', use 'any' to query for both posts and pages. Post types besides post and page need to be whitelisted using the <code>rest_api_allowed_post_types</code> filter."
                },
                "status": {
                    "type": "(string)",
                    "description": {
                        "publish": "(default) Return only published posts.",
                        "private": "Return only private posts.",
                        "draft": "Return only draft posts.",
                        "pending": "Return only posts pending editorial approval.",
                        "future": "Return only posts scheduled for future publishing.",
                        "trash": "Return only posts in the trash.",
                        "any": "Return all posts regardless of status."
                    }
                },
                "sticky": {
                    "type": "(bool)",
                    "description": "Specify the stickiness."
                },
                "author": {
                    "type": "(int)",
                    "description": "Author's user ID"
                },
                "search": {
                    "type": "(string)",
                    "description": "Search query"
                },
                "meta_key": {
                    "type": "(string)",
                    "description": "Metadata key that the post should contain"
                },
                "meta_value": {
                    "type": "(string)",
                    "description": "Metadata value that the post should contain. Will only be applied if a `meta_key` is also given"
                },
                "sites": {
                    "type": "(string)",
                    "description": "Comma-separated list of specific sites (optional, will otherwise default to first two sites in user list)"
                },
                "format": {
                    "type": "(string)",
                    "description": "\"reader|rest\" Optional argument to coerce data format to rest-api conventions or older reader-format. Defaults to \"rest\""
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "found": {
                    "type": "(int)",
                    "description": "The total number of posts found that match the request (ignoring limits, offsets, and pagination)."
                },
                "posts": {
                    "type": "(string)",
                    "description": "List of posts"
                },
                "sites": {
                    "type": "(array)",
                    "description": "List of sites"
                }
            }
        }
    }, {
        "description": "*** NOTE: ENDPOINT IN FLUX*** A list of comments from the user's blogs. The current implementation of this endpoint is only temporary and will be rewritten to make use of elasticsearch after we backfill the necessary data.",
        "method": "GET",
        "path_format": "/me/sites/comments",
        "path_labeled": "/me/sites/comments",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "number": {
                    "type": "(int)",
                    "description": "The number of comments to return.  Limit: 100. Default: 20."
                },
                "offset": {
                    "type": "(int)",
                    "description": "0-indexed offset."
                },
                "page": {
                    "type": "(int)",
                    "description": "Return the Nth 1-indexed page of comments.  Takes precedence over the <code>offset</code> parameter."
                },
                "order": {
                    "type": "(string)",
                    "description": {
                        "DESC": "(default) Return comments in descending order from newest to oldest.",
                        "ASC": "Return comments in ascending order from oldest to newest."
                    }
                },
                "after": {
                    "type": "(iso 8601 datetime)",
                    "description": "Return comments dated on or after the specified datetime."
                },
                "before": {
                    "type": "(iso 8601 datetime)",
                    "description": "Return comments dated on or before the specified datetime."
                },
                "type": {
                    "type": "(string)",
                    "description": {
                        "any": "(default) Return all comments regardless of type.",
                        "comment": "Return only regular comments.",
                        "trackback": "Return only trackbacks.",
                        "pingback": "Return only pingbacks.",
                        "pings": "Return both trackbacks and pingbacks."
                    }
                },
                "status": {
                    "type": "(string)",
                    "description": {
                        "approved": "(default) Return only approved comments.",
                        "unapproved": "Return only comments in the moderation queue.",
                        "spam": "Return only comments marked as spam.",
                        "trash": "Return only comments in the trash.",
                        "all": "Return comments of all statuses."
                    }
                },
                "sites": {
                    "type": "(string)",
                    "description": "Comma-separated list of specific sites (optional, will otherwise default to first two sites in user list)"
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "found": {
                    "type": "(int)",
                    "description": "The total number of comments found that match the request (ignoring limits, offsets, and pagination)."
                },
                "comments": {
                    "type": "(array)",
                    "description": "List of comments"
                },
                "sites": {
                    "type": "(array)",
                    "description": "List of sites in relevant results"
                }
            }
        }
    }, {
        "description": "List the currently authorized user's likes",
        "method": "GET",
        "path_format": "/me/likes/",
        "path_labeled": "/me/likes/",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "found": {
                    "type": "(int)",
                    "description": "The total number of likes for this token."
                },
                "likes": {
                    "type": "(array)",
                    "description": "An array of likes for this token."
                }
            }
        }
    }, {
        "description": "List the likes for a comment",
        "method": "GET",
        "path_format": "/sites/%s/comments/%d/likes/",
        "path_labeled": "/sites/$site/comments/$comment_ID/likes/",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$comment_ID": {
                    "type": "(int)",
                    "description": "The comment ID"
                }
            },
            "query": {
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "found": {
                    "type": "(int)",
                    "description": "The total number of likes for this comment."
                },
                "i_like": {
                    "type": "(bool)",
                    "description": "If authenticated, this returns the current like status for the user on this comment."
                },
                "likes": {
                    "type": "(array)",
                    "description": "An array of users who liked this comment."
                }
            }
        }
    }, {
        "description": "Like a comment",
        "method": "POST",
        "path_format": "/sites/%s/comments/%d/likes/new",
        "path_labeled": "/sites/$site/comments/$comment_ID/likes/new",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$comment_ID": {
                    "type": "(int)",
                    "description": "The comment ID"
                }
            },
            "query": {
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "success": {
                    "type": "(bool)",
                    "description": "Was the operation successful?"
                },
                "i_like": {
                    "type": "(bool)",
                    "description": "Does the user like this comment?"
                },
                "like_count": {
                    "type": "(int)",
                    "description": "The number of likes for this comment."
                },
                "meta": {
                    "type": "(object)",
                    "description": "Meta data"
                }
            }
        }
    }, {
        "description": "Remove your like from a comment",
        "method": "POST",
        "path_format": "/sites/%s/comments/%d/likes/mine/delete",
        "path_labeled": "/sites/$site/comments/$comment_ID/likes/mine/delete",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$comment_ID": {
                    "type": "(int)",
                    "description": "The comment ID"
                }
            },
            "query": {
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "success": {
                    "type": "(bool)",
                    "description": "Was the operation successful?"
                },
                "i_like": {
                    "type": "(bool)",
                    "description": "Does the user like this comment?"
                },
                "like_count": {
                    "type": "(int)",
                    "description": "The number of likes for this comment."
                },
                "meta": {
                    "type": "(object)",
                    "description": "Meta data"
                }
            }
        }
    }, {
        "description": "Get your like status for a comment",
        "method": "GET",
        "path_format": "/sites/%s/comments/%d/likes/mine/",
        "path_labeled": "/sites/$site/comments/$comment_ID/likes/mine/",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$comment_ID": {
                    "type": "(int)",
                    "description": "The comment ID"
                }
            },
            "query": {
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "i_like": {
                    "type": "(bool)",
                    "description": "Does the user like this comment?"
                },
                "like_count": {
                    "type": "(int)",
                    "description": "The number of likes for this comment."
                },
                "meta": {
                    "type": "(object)",
                    "description": "Meta data"
                }
            }
        }
    }, {
        "description": "List the Likes for a Post",
        "method": "GET",
        "path_format": "/sites/%s/posts/%d/likes/",
        "path_labeled": "/sites/$site/posts/$post_ID/likes/",
        "group": "posts",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$post_ID": {
                    "type": "(int)",
                    "description": "The post ID"
                }
            },
            "query": {
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "found": {
                    "type": "(int)",
                    "description": "The total number of likes for this post."
                },
                "i_like": {
                    "type": "(bool)",
                    "description": "If authenticated, this returns the current like status for the user on this post."
                },
                "likes": {
                    "type": "(array)",
                    "description": "An array of users who liked this post."
                }
            }
        }
    }, {
        "description": "Like a Post",
        "method": "POST",
        "path_format": "/sites/%s/posts/%d/likes/new",
        "path_labeled": "/sites/$site/posts/$post_ID/likes/new",
        "group": "posts",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$post_ID": {
                    "type": "(int)",
                    "description": "The post ID"
                }
            },
            "query": {
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "success": {
                    "type": "(bool)",
                    "description": "Was the operation successful?"
                },
                "i_like": {
                    "type": "(bool)",
                    "description": "Does the user like this post?"
                },
                "like_count": {
                    "type": "(int)",
                    "description": "The number of likes for this post."
                },
                "meta": {
                    "type": "(object)",
                    "description": "Meta data"
                }
            }
        }
    }, {
        "description": "Remove your Like from a Post",
        "method": "POST",
        "path_format": "/sites/%s/posts/%d/likes/mine/delete",
        "path_labeled": "/sites/$site/posts/$post_ID/likes/mine/delete",
        "group": "posts",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$post_ID": {
                    "type": "(int)",
                    "description": "The post ID"
                }
            },
            "query": {
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "success": {
                    "type": "(bool)",
                    "description": "Was the operation successful?"
                },
                "i_like": {
                    "type": "(bool)",
                    "description": "Does the user like this post?"
                },
                "like_count": {
                    "type": "(int)",
                    "description": "The number of likes for this post."
                },
                "meta": {
                    "type": "(object)",
                    "description": "Meta data"
                }
            }
        }
    }, {
        "description": "Get your Like status for a Post",
        "method": "GET",
        "path_format": "/sites/%s/posts/%d/likes/mine/",
        "path_labeled": "/sites/$site/posts/$post_ID/likes/mine/",
        "group": "posts",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$post_ID": {
                    "type": "(int)",
                    "description": "The post ID"
                }
            },
            "query": {
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "i_like": {
                    "type": "(bool)",
                    "description": "Does the user like this post?"
                },
                "like_count": {
                    "type": "(int)",
                    "description": "The number of likes for this post."
                },
                "meta": {
                    "type": "(object)",
                    "description": "Meta data"
                }
            }
        }
    }, {
        "description": "Test GET requests",
        "method": "GET",
        "path_format": "/test/%d",
        "path_labeled": "/test/$ID",
        "group": "tests",
        "request": {
            "path": {
                "$ID": {
                    "type": "(int)",
                    "description": "An arbitrary integer"
                }
            },
            "query": {
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "id": {
                    "type": "(int)",
                    "description": "Another arbitrary integer"
                },
                "default_string": {
                    "type": "(string)",
                    "description": " Default: 'default'."
                },
                "default_int": {
                    "type": "(int)",
                    "description": " Default: 100."
                },
                "boolean_whitelist_defaults_to_false": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) False",
                        "true": "True"
                    }
                },
                "boolean_whitelist_defaults_to_true": {
                    "type": "(bool)",
                    "description": {
                        "true": "(default) TRUE",
                        "false": "FALSE"
                    }
                },
                "string_whitelist_defaults_to_foo": {
                    "type": "(string)",
                    "description": {
                        "foo": "(default) Foolish",
                        "bar": "Barstow"
                    }
                },
                "url": {
                    "type": "(url)",
                    "description": ""
                },
                "datetime": {
                    "type": "(iso 8601 datetime)",
                    "description": ""
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "method_id_matches_query_id": {
                    "type": "(bool)",
                    "description": "Whether the arbitrary integer in the path matches the arbitrary integer in the query string."
                },
                "method_id": {
                    "type": "(int)",
                    "description": ""
                },
                "id": {
                    "type": "(int)",
                    "description": "Another arbitrary integer"
                },
                "default_string": {
                    "type": "(string)",
                    "description": ""
                },
                "default_int": {
                    "type": "(int)",
                    "description": ""
                },
                "boolean_whitelist_defaults_to_false": {
                    "type": "(bool)",
                    "description": ""
                },
                "boolean_whitelist_defaults_to_true": {
                    "type": "(bool)",
                    "description": ""
                },
                "string_whitelist_defaults_to_foo": {
                    "type": "(string)",
                    "description": ""
                },
                "url": {
                    "type": "(url)",
                    "description": ""
                },
                "datetime": {
                    "type": "(iso 8601 datetime)",
                    "description": ""
                }
            }
        }
    }, {
        "description": "Test POST requests",
        "method": "POST",
        "path_format": "/test/%d",
        "path_labeled": "/test/$ID",
        "group": "tests",
        "request": {
            "path": {
                "$ID": {
                    "type": "(int)",
                    "description": "An arbitrary integer"
                }
            },
            "query": {
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "id": {
                    "type": "(int)",
                    "description": "Another arbitrary integer"
                }
            },
            "body": {
                "id": {
                    "type": "(int)",
                    "description": "A potentially different arbitrary integer"
                }
            }
        },
        "response": {
            "body": {
                "method_id_matches_query_id": {
                    "type": "(bool)",
                    "description": "Whether the arbitrary integer in the path matches the arbitrary integer in the query string."
                },
                "method_id_matches_input_id": {
                    "type": "(bool)",
                    "description": "Whether the arbitrary integer in the path matches the arbitrary integer in the POST input."
                }
            }
        }
    }, {
        "description": "Run several GET endpoints and return them as an array",
        "method": "GET",
        "path_format": "/batch/",
        "path_labeled": "/batch/",
        "group": "batch",
        "request": {
            "path": [],
            "query": {
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "urls": {
                    "type": "(array)",
                    "description": "Array of endpoints to call"
                }
            },
            "body": []
        },
        "response": {
            "body": []
        }
    }, {
        "description": "List a site's followers in reverse chronological order",
        "method": "GET",
        "path_format": "/sites/%s/follows/",
        "path_labeled": "/sites/$site/follows/",
        "group": "follow",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, the site domain"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "page": {
                    "type": "(int)",
                    "description": "page number Default: 1."
                },
                "number": {
                    "type": "(int)",
                    "description": "number of followers to return Default: 20."
                }
            },
            "body": []
        },
        "response": {
            "body": []
        }
    }, {
        "description": "Follow a Blog",
        "method": "POST",
        "path_format": "/sites/%s/follows/new",
        "path_labeled": "/sites/$site/follows/new",
        "group": "follow",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                }
            },
            "query": {
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "success": {
                    "type": "(bool)",
                    "description": "Was the operation successful?"
                },
                "is_following": {
                    "type": "(bool)",
                    "description": "Is the user following this blog?"
                },
                "meta": {
                    "type": "(object)",
                    "description": "Meta data"
                }
            }
        }
    }, {
        "description": "Unfollow a Blog",
        "method": "POST",
        "path_format": "/sites/%s/follows/mine/delete",
        "path_labeled": "/sites/$site/follows/mine/delete",
        "group": "follow",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                }
            },
            "query": {
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "success": {
                    "type": "(bool)",
                    "description": "Was the operation successful?"
                },
                "is_following": {
                    "type": "(bool)",
                    "description": "Is the user following this blog?"
                },
                "meta": {
                    "type": "(object)",
                    "description": "Meta data"
                }
            }
        }
    }, {
        "description": "Get Blog Following status for this User",
        "method": "GET",
        "path_format": "/sites/%s/follows/mine",
        "path_labeled": "/sites/$site/follows/mine",
        "group": "follow",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                }
            },
            "query": {
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "is_following": {
                    "type": "(bool)",
                    "description": "Is the user following this blog?"
                },
                "meta": {
                    "type": "(object)",
                    "description": "Meta data"
                }
            }
        }
    }, {
        "description": "Get Reblog status for a Post",
        "method": "GET",
        "path_format": "/sites/%s/posts/%d/reblogs/mine",
        "path_labeled": "/sites/$site/posts/$post_ID/reblogs/mine",
        "group": "posts",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$post_ID": {
                    "type": "(int)",
                    "description": "The post ID"
                }
            },
            "query": {
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "is_reblogged": {
                    "type": "(bool)",
                    "description": "Has the user reblogged this post?"
                },
                "meta": {
                    "type": "(object)",
                    "description": "Meta data"
                },
                "ID": {
                    "type": "(int)",
                    "description": "ID of the new post"
                }
            }
        }
    }, {
        "description": "Reblog a Post",
        "method": "POST",
        "path_format": "/sites/%s/posts/%d/reblogs/new",
        "path_labeled": "/sites/$site/posts/$post_ID/reblogs/new",
        "group": "posts",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site ID, The site domain"
                },
                "$post_ID": {
                    "type": "(int)",
                    "description": "The post ID"
                }
            },
            "query": {
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "destination_site_id": {
                    "type": "(int)",
                    "description": "The site ID reblogging to"
                },
                "note": {
                    "type": "(string)",
                    "description": "The reblog note"
                }
            }
        },
        "response": {
            "body": {
                "success": {
                    "type": "(bool)",
                    "description": "Was the operation successful?"
                },
                "is_reblogged": {
                    "type": "(bool)",
                    "description": "Has the user reblogged this post?"
                },
                "meta": {
                    "type": "(object)",
                    "description": "Meta data"
                },
                "ID": {
                    "type": "(int)",
                    "description": "ID of the new post"
                }
            }
        }
    }, {
        "description": "List Freshly Pressed Posts",
        "method": "GET",
        "path_format": "/freshly-pressed/",
        "path_labeled": "/freshly-pressed/",
        "group": "freshly-pressed",
        "request": {
            "path": [],
            "query": {
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "number": {
                    "type": "(int)",
                    "description": "The number of posts to return. Default: 10. Limit: 40. Default: 10."
                },
                "after": {
                    "type": "(iso 8601 datetime)",
                    "description": "Return posts picked on or after the specified datetime."
                },
                "before": {
                    "type": "(iso 8601 datetime)",
                    "description": "Return posts picked on or before the specified datetime."
                },
                "content_width": {
                    "type": "(int)",
                    "description": "When in context=display, images/embeds in post content will be set to the desired maximum width. Default: 480."
                },
                "thumb_width": {
                    "type": "(int)",
                    "description": "Desired width of thumbnail images, in pixels. Default: 252."
                },
                "thumb_height": {
                    "type": "(int)",
                    "description": "Desired height of thumbnail images, in pixels. Default: 160."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "The post ID."
                },
                "site_ID": {
                    "type": "(int)",
                    "description": "The site ID."
                },
                "author": {
                    "type": "(object)",
                    "description": "The author of the post."
                },
                "date": {
                    "type": "(iso 8601 datetime)",
                    "description": "The post's creation time."
                },
                "modified": {
                    "type": "(iso 8601 datetime)",
                    "description": "The post's most recent update time."
                },
                "title": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "URL": {
                    "type": "(url)",
                    "description": "The full permalink URL to the post."
                },
                "short_URL": {
                    "type": "(url)",
                    "description": "The wp.me short URL."
                },
                "content": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "excerpt": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "slug": {
                    "type": "(string)",
                    "description": "The name (slug) for the post, used in URLs."
                },
                "guid": {
                    "type": "(string)",
                    "description": "The GUID for the post."
                },
                "status": {
                    "type": "(string)",
                    "description": {
                        "publish": "The post is published.",
                        "draft": "The post is saved as a draft.",
                        "pending": "The post is pending editorial approval.",
                        "future": "The post is scheduled for future publishing.",
                        "trash": "The post is in the trash."
                    }
                },
                "sticky": {
                    "type": "(bool)",
                    "description": "Is the post sticky?"
                },
                "password": {
                    "type": "(string)",
                    "description": "The plaintext password protecting the post, or, more likely, the empty string if the post is not password protected."
                },
                "parent": {
                    "type": "(object|false)",
                    "description": "A reference to the post's parent, if it has one."
                },
                "type": {
                    "type": "(string)",
                    "description": "The post's post_type. Post types besides post and page need to be whitelisted using the <code>rest_api_allowed_post_types</code> filter."
                },
                "comments_open": {
                    "type": "(bool)",
                    "description": "Is the post open for comments?"
                },
                "pings_open": {
                    "type": "(bool)",
                    "description": "Is the post open for pingbacks, trackbacks?"
                },
                "likes_enabled": {
                    "type": "(bool)",
                    "description": "Is the post open to likes?"
                },
                "sharing_enabled": {
                    "type": "(bool)",
                    "description": "Should sharing buttons show on this post?"
                },
                "gplusauthorship_enabled": {
                    "type": "(bool)",
                    "description": "Should a Google+ account be associated with this post?"
                },
                "comment_count": {
                    "type": "(int)",
                    "description": "The number of comments for this post."
                },
                "like_count": {
                    "type": "(int)",
                    "description": "The number of likes for this post."
                },
                "i_like": {
                    "type": "(bool)",
                    "description": "Does the current user like this post?"
                },
                "is_reblogged": {
                    "type": "(bool)",
                    "description": "Did the current user reblog this post?"
                },
                "is_following": {
                    "type": "(bool)",
                    "description": "Is the current user following this blog?"
                },
                "global_ID": {
                    "type": "(string)",
                    "description": "A unique WordPress.com-wide representation of a post."
                },
                "featured_image": {
                    "type": "(url)",
                    "description": "The URL to the featured image for this post if it has one."
                },
                "format": {
                    "type": "(string)",
                    "description": {
                        "standard": "Standard",
                        "aside": "Aside",
                        "chat": "Chat",
                        "gallery": "Gallery",
                        "link": "Link",
                        "image": "Image",
                        "quote": "Quote",
                        "status": "Status",
                        "video": "Video",
                        "audio": "Audio"
                    }
                },
                "geo": {
                    "type": "(object|false)",
                    "description": ""
                },
                "publicize_URLs": {
                    "type": "(array)",
                    "description": "Array of Twitter and Facebook URLs published by this post."
                },
                "tags": {
                    "type": "(object)",
                    "description": "Hash of tags (keyed by tag name) applied to the post."
                },
                "categories": {
                    "type": "(object)",
                    "description": "Hash of categories (keyed by category name) applied to the post."
                },
                "attachments": {
                    "type": "(object)",
                    "description": "Hash of post attachments (keyed by attachment ID)."
                },
                "metadata": {
                    "type": "(array)",
                    "description": "Array of post metadata keys and values. All unprotected meta keys are available by default for read requests. Both unprotected and protected meta keys are available for authenticated requests with access. Protected meta keys can be made available with the <code>rest_api_allowed_public_metadata</code> filter."
                },
                "meta": {
                    "type": "(object)",
                    "description": "API result meta data"
                },
                "date_range": {
                    "type": "(object)",
                    "description": "date range covered by current results."
                },
                "number": {
                    "type": "(int)",
                    "description": "The number of posts brought back by current query."
                },
                "posts": {
                    "type": "(array)",
                    "description": "An array of post objects, with added Freshly Pressed info, in the editorial property for each post."
                }
            }
        }
    }, {
        "description": "Reverse-chronologically list User Notifications",
        "method": "GET",
        "path_format": "/notifications/",
        "path_labeled": "/notifications/",
        "group": "notifications",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "List of comma separated fields in the note object to return. Default: 'id,type,unread,noticon,body,subject,timestamp'."
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "ids": {
                    "type": "(array)",
                    "description": "Array of ids to be retrieved."
                },
                "type": {
                    "type": "(string)",
                    "description": "Return only notifications of a particular type. Default is all types."
                },
                "unread": {
                    "type": "(bool)",
                    "description": "Return only unread comments. Default: false."
                },
                "read": {
                    "type": "(bool)",
                    "description": "Return only read comments. Default: false."
                },
                "number": {
                    "type": "(int)",
                    "description": "The number of notifications to return. Limit: 99. Default: 9."
                },
                "since": {
                    "type": "(int)",
                    "description": "Return notifications since the specified UNIX time."
                },
                "before": {
                    "type": "(int)",
                    "description": "Return notifications updated on or before the specified UNIX time."
                },
                "num_note_items": {
                    "type": "(int)",
                    "description": "Number of items to include in notifications that contain multiple items Default: 9."
                },
                "trap": {
                    "type": "(bool)",
                    "description": "Combine similar notes into one. Client should delete notes with empty subjects. Default: false."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "id": {
                    "type": "(int)",
                    "description": "The note ID."
                },
                "unread": {
                    "type": "(int)",
                    "description": "Number of unread updates this note has had. 0 == note is read"
                },
                "noticon": {
                    "type": "(string)",
                    "description": "The name of the icon that best fits this note"
                },
                "type": {
                    "type": "(string)",
                    "description": "The type of the note. eg comment, likes, follows, etc"
                },
                "timestamp": {
                    "type": "(int)",
                    "description": "The notes' last update time as a UNIX timestamp, GMT."
                },
                "date": {
                    "type": "(iso 8601 datetime)",
                    "description": "The notes' last update time in the user's timezone."
                },
                "subject": {
                    "type": "(string)",
                    "description": {
                        "icon": "(string) Icon URL. 256x256 px, client can downsize",
                        "noticon": "(string) Noticon character. See Noticons Font: wordpress.com/i/noticons/example.html.",
                        "status": "(string) Text string describing the state of this notification. This is used to indicate things like \"Replied\", \"Pending\", etc for comments. By default displayed in brackets, but can be handled however a client wants on a per notification type basis.",
                        "html": "(html) The notification subject. Max of 200 visible chars.",
                        "text": "(string) Text of the notification subject. Max of 100 chars. No HTML. (iOS notification, etc)"
                    }
                },
                "snippet": {
                    "type": "(string)",
                    "description": "Max 90 characters of text pulled from the subject of the notification - eg the comment content, or post content (optional)"
                },
                "body": {
                    "type": "(string)",
                    "description": {
                        "template": {
                            "single-line-list": "The notification body is a list of small items with attached actions. Fields: header, header_text, header_link, footer, footer_text, footer_link, items( icon, header, action ).",
                            "multi-line-list": "The notification body is a list of larger items with a single set of actions. Fields: header, footer, items( icon, header, html, action, objects ), actions.",
                            "big-badge": "The notification body is a large image or video with limited text. Fields: header, html, badge, objects."
                        },
                        "header": "(html) header content of the body.",
                        "html": "(html) main content of the body.",
                        "badge": "(string) URL of Image or Video.",
                        "badge_width": "(int) Badge width.",
                        "badge_height": "(int) Badge height.",
                        "objects": "(object) Assoc Array of (possibly embedded) objects from the REST API. eg \"/sites/1234\" : false|object",
                        "items": {
                            "icon": "(string) Icon URL. 256x256px",
                            "icon_width": "(int) Icon width. deprecated",
                            "icon_height": "(int) Icon height. deprecated",
                            "header": "(html) Header for this item.",
                            "header_text": "(string) Header for this item.",
                            "header_link": "(string) Link for this item.",
                            "html": "(html) Body for this item.",
                            "action": {
                                "type": "(string) action type name.",
                                "params": "(array) key value pairs of parameters for performing the action."
                            },
                            "objects": "(object) Assoc Array of (possibly embedded) objects associated with the item.from the REST API. eg \"/sites/1234\" : false|object"
                        },
                        "footer": "(html) Footer content of the body.",
                        "footer_text": "(string) Footer text.",
                        "footer_link": "(string) Footer link.",
                        "actions": {
                            "type": "(string) action type name.",
                            "params": "(array) key value pairs of parameters for the action."
                        }
                    }
                },
                "status": {
                    "type": "(string)",
                    "description": {
                        "approval_status": "(string) WP comment_status field for the comment. (optional)",
                        "undo_status": "(int) 1 or 0 indicating whether the approval action can be undone (optional)",
                        "i_replied": "(boolean) Whether the current user has replied to the comment (optional)"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": {
                        "ids": "(object) Key-value pairs with just the numeric id of each related object",
                        "links": "(object) Key-value pairs with URI to the endpoint for related object",
                        "data": "(object) Key-object pairs with the object from the associated endpoint"
                    }
                },
                "number": {
                    "type": "(int)",
                    "description": "The number of notifications brought back by current query."
                },
                "last_seen_time": {
                    "type": "(int)",
                    "description": "The UNIX timestamp of the last time the user viewed her notes."
                },
                "notes": {
                    "type": "(array)",
                    "description": "An array of notification objects."
                }
            }
        }
    }, {
        "description": "Get a Notification",
        "method": "GET",
        "path_format": "/notifications/%d",
        "path_labeled": "/notifications/$note_ID",
        "group": "notifications",
        "request": {
            "path": {
                "$note_ID": {
                    "type": "(int)",
                    "description": "The note ID"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "List of comma separated fields in the note object to return. Default: 'id,type,unread,noticon,body,subject,timestamp'."
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "num_note_items": {
                    "type": "(int)",
                    "description": "Number of items to include in notifications that contain multiple items Default: 9."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "id": {
                    "type": "(int)",
                    "description": "The note ID."
                },
                "unread": {
                    "type": "(int)",
                    "description": "Number of unread updates this note has had. 0 == note is read"
                },
                "noticon": {
                    "type": "(string)",
                    "description": "The name of the icon that best fits this note"
                },
                "type": {
                    "type": "(string)",
                    "description": "The type of the note. eg comment, likes, follows, etc"
                },
                "timestamp": {
                    "type": "(int)",
                    "description": "The notes' last update time as a UNIX timestamp, GMT."
                },
                "date": {
                    "type": "(iso 8601 datetime)",
                    "description": "The notes' last update time in the user's timezone."
                },
                "subject": {
                    "type": "(string)",
                    "description": {
                        "icon": "(string) Icon URL. 256x256 px, client can downsize",
                        "noticon": "(string) Noticon character. See Noticons Font: wordpress.com/i/noticons/example.html.",
                        "status": "(string) Text string describing the state of this notification. This is used to indicate things like \"Replied\", \"Pending\", etc for comments. By default displayed in brackets, but can be handled however a client wants on a per notification type basis.",
                        "html": "(html) The notification subject. Max of 200 visible chars.",
                        "text": "(string) Text of the notification subject. Max of 100 chars. No HTML. (iOS notification, etc)"
                    }
                },
                "snippet": {
                    "type": "(string)",
                    "description": "Max 90 characters of text pulled from the subject of the notification - eg the comment content, or post content (optional)"
                },
                "body": {
                    "type": "(string)",
                    "description": {
                        "template": {
                            "single-line-list": "The notification body is a list of small items with attached actions. Fields: header, header_text, header_link, footer, footer_text, footer_link, items( icon, header, action ).",
                            "multi-line-list": "The notification body is a list of larger items with a single set of actions. Fields: header, footer, items( icon, header, html, action, objects ), actions.",
                            "big-badge": "The notification body is a large image or video with limited text. Fields: header, html, badge, objects."
                        },
                        "header": "(html) header content of the body.",
                        "html": "(html) main content of the body.",
                        "badge": "(string) URL of Image or Video.",
                        "badge_width": "(int) Badge width.",
                        "badge_height": "(int) Badge height.",
                        "objects": "(object) Assoc Array of (possibly embedded) objects from the REST API. eg \"/sites/1234\" : false|object",
                        "items": {
                            "icon": "(string) Icon URL. 256x256px",
                            "icon_width": "(int) Icon width. deprecated",
                            "icon_height": "(int) Icon height. deprecated",
                            "header": "(html) Header for this item.",
                            "header_text": "(string) Header for this item.",
                            "header_link": "(string) Link for this item.",
                            "html": "(html) Body for this item.",
                            "action": {
                                "type": "(string) action type name.",
                                "params": "(array) key value pairs of parameters for performing the action."
                            },
                            "objects": "(object) Assoc Array of (possibly embedded) objects associated with the item.from the REST API. eg \"/sites/1234\" : false|object"
                        },
                        "footer": "(html) Footer content of the body.",
                        "footer_text": "(string) Footer text.",
                        "footer_link": "(string) Footer link.",
                        "actions": {
                            "type": "(string) action type name.",
                            "params": "(array) key value pairs of parameters for the action."
                        }
                    }
                },
                "status": {
                    "type": "(string)",
                    "description": {
                        "approval_status": "(string) WP comment_status field for the comment. (optional)",
                        "undo_status": "(int) 1 or 0 indicating whether the approval action can be undone (optional)",
                        "i_replied": "(boolean) Whether the current user has replied to the comment (optional)"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": {
                        "ids": "(object) Key-value pairs with just the numeric id of each related object",
                        "links": "(object) Key-value pairs with URI to the endpoint for related object",
                        "data": "(object) Key-object pairs with the object from the associated endpoint"
                    }
                },
                "note": {
                    "type": "(object)",
                    "description": "representation of a single notification"
                }
            }
        }
    }, {
        "description": "Set the timestamp of the most recently seen Notification",
        "method": "POST",
        "path_format": "/notifications/seen",
        "path_labeled": "/notifications/seen",
        "group": "notifications",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "time": {
                    "type": "(int)",
                    "description": "The UNIX timestamp of the most recent Notification seen on a client."
                }
            }
        },
        "response": {
            "body": {
                "success": {
                    "type": "(bool)",
                    "description": "success of the operation"
                },
                "last_seen_time": {
                    "type": "(int)",
                    "description": "The UNIX timestamp of the last time the user viewed her notes."
                }
            }
        }
    }, {
        "description": "Mark a set of Notifications as read",
        "method": "POST",
        "path_format": "/notifications/read",
        "path_labeled": "/notifications/read",
        "group": "notifications",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "counts": {
                    "type": "(array)",
                    "description": "Decrement the unread count for a notification. Key=note_ID, Value=decrement amount."
                }
            }
        },
        "response": {
            "body": {
                "success": {
                    "type": "(bool)",
                    "description": "success of the operation"
                },
                "updated": {
                    "type": "(array)",
                    "description": "IDs of any of the operated on notifications which have new, unread updates"
                }
            }
        }
    }, {
        "description": "Get posts from the blogs a user follows",
        "method": "GET",
        "path_format": "/reader/following",
        "path_labeled": "/reader/following",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "per_page": {
                    "type": "(int)",
                    "description": "number ofposts in a page"
                },
                "before": {
                    "type": "(int)",
                    "description": "unix timestamp for max post date"
                },
                "after": {
                    "type": "(int)",
                    "description": "unix timestamp for min post date"
                },
                "filter": {
                    "type": "(string)",
                    "description": "filter"
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "posts": {
                    "type": "(array)",
                    "description": "An array of post objects"
                }
            }
        }
    }, {
        "description": "Get posts the user has liked",
        "method": "GET",
        "path_format": "/reader/liked",
        "path_labeled": "/reader/liked",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "per_page": {
                    "type": "(int)",
                    "description": "number ofposts in a page"
                },
                "page": {
                    "type": "(int)",
                    "description": "page set"
                },
                "before": {
                    "type": "(int)",
                    "description": "unix timestamp for max post date"
                },
                "after": {
                    "type": "(int)",
                    "description": "unix timestamp for min post date"
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "posts": {
                    "type": "(array)",
                    "description": "An array of post objects"
                }
            }
        }
    }, {
        "description": "Get posts from a reader topic",
        "method": "GET",
        "path_format": "/reader/topics/%s",
        "path_labeled": "/reader/topics/$topic",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$topic": {
                    "type": "(string)",
                    "description": "topic slug"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "per_page": {
                    "type": "(int)",
                    "description": "number ofposts in a page"
                },
                "page": {
                    "type": "(int)",
                    "description": "page number"
                },
                "before": {
                    "type": "(int)",
                    "description": "unix timestamp for max post date"
                },
                "after": {
                    "type": "(int)",
                    "description": "unix timestamp for min post date"
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "posts": {
                    "type": "(array)",
                    "description": "An array of post objects"
                },
                "topic": {
                    "type": "(string)",
                    "description": "topic slug"
                }
            }
        }
    }, {
        "description": "Get the user's topics",
        "method": "GET",
        "path_format": "/reader/topics",
        "path_labeled": "/reader/topics",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "topics": {
                    "type": "(array)",
                    "description": "An array of post objects"
                }
            }
        }
    }, {
        "description": "Get a8c posts from the blogs an a12n user follows. User must be an a12n",
        "method": "GET",
        "path_format": "/reader/a8c",
        "path_labeled": "/reader/a8c",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "per_page": {
                    "type": "(int)",
                    "description": "number ofposts in a page"
                },
                "before": {
                    "type": "(int)",
                    "description": "unix timestamp for max post date"
                },
                "after": {
                    "type": "(int)",
                    "description": "unix timestamp for min post date"
                },
                "filter": {
                    "type": "(string)",
                    "description": "filter"
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "posts": {
                    "type": "(array)",
                    "description": "An array of post objects"
                }
            }
        }
    }, {
        "description": "(beta) Register for a new account.",
        "method": "POST",
        "path_format": "/users/new",
        "path_labeled": "/users/new",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "email": {
                    "type": "(string)",
                    "description": "Email address to be used for the new account"
                },
                "username": {
                    "type": "(string)",
                    "description": "Username to be used for the new account"
                },
                "password": {
                    "type": "(string)",
                    "description": "Plaintext password to be used for the new account"
                },
                "validate": {
                    "type": "(bool)",
                    "description": "When true this will only validate the user credentials."
                },
                "client_id": {
                    "type": "(int)",
                    "description": "The client_id of the app requesting the new user."
                },
                "client_secret": {
                    "type": "(string)",
                    "description": "The client secret of the app requesting the new user."
                }
            }
        },
        "response": {
            "body": {
                "success": {
                    "type": "(bool)",
                    "description": "Was the operation successful?"
                }
            }
        }
    }, {
        "description": "(beta) Register for a new site.",
        "method": "POST",
        "path_format": "/sites/new",
        "path_labeled": "/sites/new",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "blog_name": {
                    "type": "(string)",
                    "description": "The blog url that will be used for the new blog."
                },
                "blog_title": {
                    "type": "(string)",
                    "description": "The blog name that will be used for the new blog."
                },
                "lang_id": {
                    "type": "(int)",
                    "description": "The lang_id to use for the new blog."
                },
                "public": {
                    "type": "(int)",
                    "description": "1 = public, 0 = block search engines, -1 = private. Default is public."
                },
                "validate": {
                    "type": "(bool)",
                    "description": "When true this will only validate the blog parameters."
                },
                "client_id": {
                    "type": "(int)",
                    "description": "The client_id of the app requesting the new user."
                },
                "client_secret": {
                    "type": "(string)",
                    "description": "The client secret of the app requesting the new user."
                }
            }
        },
        "response": {
            "body": {
                "success": {
                    "type": "(bool)",
                    "description": "Was the operation successful?"
                },
                "blog_id": {
                    "type": "(int)",
                    "description": "The blog_id of the newly created Blog."
                }
            }
        }
    }, {
        "description": "Get the status of the current bulk reindex of site.",
        "method": "GET",
        "path_format": "/sites/%s/reindex",
        "path_labeled": "/sites/$site/reindex",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site id"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "status": {
                    "type": "(string)",
                    "description": "Status of reindex for site. (WAITING|INDEXING|DONE)"
                },
                "posts": {
                    "type": "(array|null)",
                    "description": "Count of total posts on site and current number imported."
                }
            }
        }
    }, {
        "description": "Triger a bulk reindex of site.",
        "method": "POST",
        "path_format": "/sites/%s/reindex/trigger",
        "path_labeled": "/sites/$site/reindex/trigger",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site id"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "status": {
                    "type": "(string)",
                    "description": "Status of reindex for site. (WAITING|INDEXING|DONE)"
                },
                "posts": {
                    "type": "(array|null)",
                    "description": "Count of total posts on site and current number imported."
                }
            }
        }
    }, {
        "description": "Search within a site",
        "method": "POST",
        "path_format": "/sites/%s/search",
        "path_labeled": "/sites/$site/search",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site id"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "size": {
                    "type": "(int)",
                    "description": "Number of results to return"
                },
                "from": {
                    "type": "(int)",
                    "description": "Item number to return"
                },
                "fields": {
                    "type": "(array)",
                    "description": "List of fields to return"
                },
                "sort": {
                    "type": "(array)",
                    "description": "How to sort results. Default is _score. See <a href=\"http://www.elasticsearch.org/guide/reference/api/search/sort.html\">the ElasticSearch sort docs</a>"
                },
                "query": {
                    "type": "(array)",
                    "description": "Allows (almost) full access to the ES query DSL. See <a href=\"http://www.elasticsearch.org/guide/reference/query-dsl/\">ElasticSearch Query DSL</a>. Some filters and queries are not allowed for performance reasons."
                },
                "facets": {
                    "type": "(array)",
                    "description": "Return facets for the search. See <a href=\"http://www.elasticsearch.org/guide/reference/api/search/facets/index.html\">ElasticSearch facets</a>. Supports terms, range, histogram, and date_histogram. Not allowed on content or title fields."
                },
                "filter": {
                    "type": "(array)",
                    "description": "Filter the search. See <a href=\"http://www.elasticsearch.org/guide/reference/query-dsl/filtered-query.html\">ElasticSearch filters</a>"
                }
            }
        },
        "response": {
            "body": {
                "hits": {
                    "type": "(array)",
                    "description": "The top level \"hits\" object from the <a href=\"http://www.elasticsearch.org/guide/reference/api/search/request-body.html\">ElasticSearch query response.</a>"
                }
            }
        }
    }, {
        "description": "Search within a site for related posts",
        "method": "POST",
        "path_format": "/sites/%s/posts/%s/related",
        "path_labeled": "/sites/$site/posts/$post/related",
        "group": "posts",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site id"
                },
                "$post": {
                    "type": "(int)",
                    "description": "The post id"
                }
            },
            "query": {
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "size": {
                    "type": "(int)",
                    "description": "Number of results to return"
                },
                "filter": {
                    "type": "(object)",
                    "description": "Filter the search. See <a href=\"http://www.elasticsearch.org/guide/reference/query-dsl/filtered-query.html\">ElasticSearch filters</a>"
                }
            }
        },
        "response": {
            "body": {
                "results": {
                    "type": "(array)",
                    "description": "The top level \"hits\" object from the <a href=\"http://www.elasticsearch.org/guide/reference/api/search/request-body.html\">ElasticSearch query response</a> with post_id and blog_id fields of the related items."
                }
            }
        }
    }, {
        "description": "Get a site's stats",
        "method": "GET",
        "path_format": "/sites/%s/stats",
        "path_labeled": "/sites/$site/stats",
        "group": "stats",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site's id or domain"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": []
        }
    }, {
        "description": "View and visitor counts for a site",
        "method": "GET",
        "path_format": "/sites/%s/stats/visits",
        "path_labeled": "/sites/$site/stats/visits",
        "group": "stats",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site's id or domain"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "unit": {
                    "type": "(string)",
                    "description": "One of: day, week or month Default: 'day'."
                },
                "quantity": {
                    "type": "(int)",
                    "description": "number of units to return Default: 30."
                },
                "date": {
                    "type": "(string)",
                    "description": "limit the chart data to visits earlier than requested date"
                }
            },
            "body": []
        },
        "response": {
            "body": []
        }
    }, {
        "description": "Get a site's referrers",
        "method": "GET",
        "path_format": "/sites/%s/stats/referrers",
        "path_labeled": "/sites/$site/stats/referrers",
        "group": "stats",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site's id or domain"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "date": {
                    "type": "(string)",
                    "description": "the most recent day to include in results"
                },
                "days": {
                    "type": "(int)",
                    "description": "number of days to include in the query Default: 1."
                }
            },
            "body": []
        },
        "response": {
            "body": []
        }
    }, {
        "description": "View a site's top posts and pages by views",
        "method": "GET",
        "path_format": "/sites/%s/stats/top-posts",
        "path_labeled": "/sites/$site/stats/top-posts",
        "group": "stats",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site's id or domain"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "date": {
                    "type": "(string)",
                    "description": "the most recent day to include in results"
                },
                "days": {
                    "type": "(int)",
                    "description": "number of days to include in the query Default: 1."
                }
            },
            "body": []
        },
        "response": {
            "body": []
        }
    }, {
        "description": "View a site's views by country",
        "method": "GET",
        "path_format": "/sites/%s/stats/country-views",
        "path_labeled": "/sites/$site/stats/country-views",
        "group": "stats",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site's id or domain"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "date": {
                    "type": "(string)",
                    "description": "the most recent day to include in results"
                },
                "days": {
                    "type": "(int)",
                    "description": "number of days to include in the query Default: 1."
                }
            },
            "body": []
        },
        "response": {
            "body": []
        }
    }, {
        "description": "View a site's outbound clicks",
        "method": "GET",
        "path_format": "/sites/%s/stats/clicks",
        "path_labeled": "/sites/$site/stats/clicks",
        "group": "stats",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site's id or domain"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "date": {
                    "type": "(string)",
                    "description": "the most recent day to include in results"
                },
                "days": {
                    "type": "(int)",
                    "description": "number of days to include in the query Default: 1."
                }
            },
            "body": []
        },
        "response": {
            "body": []
        }
    }, {
        "description": "View search terms used to find the site",
        "method": "GET",
        "path_format": "/sites/%s/stats/search-terms",
        "path_labeled": "/sites/$site/stats/search-terms",
        "group": "stats",
        "request": {
            "path": {
                "$site": {
                    "type": "(int|string)",
                    "description": "The site's id or domain"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "date": {
                    "type": "(string)",
                    "description": "the most recent day to include in results"
                },
                "days": {
                    "type": "(int)",
                    "description": "number of days to include in the query Default: 1."
                }
            },
            "body": []
        },
        "response": {
            "body": []
        }
    }, {
        "description": "Default reader menu.",
        "method": "GET",
        "path_format": "/read/menu/",
        "path_labeled": "/read/menu/",
        "group": "read",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "default": {
                    "type": "(array)",
                    "description": "Default list of endpoints for the reader."
                },
                "subscribed": {
                    "type": "(array)",
                    "description": "List of the user's subscribed topics."
                },
                "recommended": {
                    "type": "(array)",
                    "description": "A list of recommended topics."
                }
            }
        }
    }, {
        "description": "Get details about a feed",
        "method": "GET",
        "path_format": "/read/feed/%s",
        "path_labeled": "/read/feed/$feed_url",
        "group": "read",
        "request": {
            "path": {
                "$feed_url": {
                    "type": "(none)",
                    "description": ""
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "blog_ID": {
                    "type": "(string)",
                    "description": "The site id, 0 if this not a hosted site."
                },
                "feed_ID": {
                    "type": "(string)",
                    "description": "The id for this feed"
                },
                "URL": {
                    "type": "(string)",
                    "description": "The main URL for the site"
                },
                "name": {
                    "type": "(string)",
                    "description": "The name of the site"
                },
                "subscribers_count": {
                    "type": "(int)",
                    "description": "The number of subscribers for this feed"
                }
            }
        }
    }, {
        "description": "List of posts from the blogs a user follows.",
        "method": "GET",
        "path_format": "/read/following/",
        "path_labeled": "/read/following/",
        "group": "read",
        "request": {
            "path": [],
            "query": {
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "number": {
                    "type": "(int)",
                    "description": "The number of posts to return.  Limit: 40. Default: 10."
                },
                "page": {
                    "type": "(int)",
                    "description": "Return the Nth 1-indexed page of posts."
                },
                "order": {
                    "type": "(string)",
                    "description": {
                        "DESC": "(default) Return posts in descending order.  For dates, that means newest to oldest.",
                        "ASC": "Return posts in ascending order.  For dates, that means oldest to newest."
                    }
                },
                "after": {
                    "type": "(iso 8601 datetime)",
                    "description": "Return posts dated on or after the specified datetime."
                },
                "before": {
                    "type": "(iso 8601 datetime)",
                    "description": "Return posts dated on or before the specified datetime."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "The post ID."
                },
                "site_ID": {
                    "type": "(int)",
                    "description": "The site ID."
                },
                "author": {
                    "type": "(object)",
                    "description": "The author of the post."
                },
                "date": {
                    "type": "(iso 8601 datetime)",
                    "description": "The post's creation time."
                },
                "modified": {
                    "type": "(iso 8601 datetime)",
                    "description": "The post's most recent update time."
                },
                "title": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "URL": {
                    "type": "(url)",
                    "description": "The full permalink URL to the post."
                },
                "short_URL": {
                    "type": "(url)",
                    "description": "The wp.me short URL."
                },
                "content": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "excerpt": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "slug": {
                    "type": "(string)",
                    "description": "The name (slug) for the post, used in URLs."
                },
                "guid": {
                    "type": "(string)",
                    "description": "The GUID for the post."
                },
                "status": {
                    "type": "(string)",
                    "description": {
                        "publish": "The post is published.",
                        "draft": "The post is saved as a draft.",
                        "pending": "The post is pending editorial approval.",
                        "future": "The post is scheduled for future publishing.",
                        "trash": "The post is in the trash."
                    }
                },
                "sticky": {
                    "type": "(bool)",
                    "description": "Is the post sticky?"
                },
                "password": {
                    "type": "(string)",
                    "description": "The plaintext password protecting the post, or, more likely, the empty string if the post is not password protected."
                },
                "parent": {
                    "type": "(object|false)",
                    "description": "A reference to the post's parent, if it has one."
                },
                "type": {
                    "type": "(string)",
                    "description": "The post's post_type. Post types besides post and page need to be whitelisted using the <code>rest_api_allowed_post_types</code> filter."
                },
                "comments_open": {
                    "type": "(bool)",
                    "description": "Is the post open for comments?"
                },
                "pings_open": {
                    "type": "(bool)",
                    "description": "Is the post open for pingbacks, trackbacks?"
                },
                "likes_enabled": {
                    "type": "(bool)",
                    "description": "Is the post open to likes?"
                },
                "sharing_enabled": {
                    "type": "(bool)",
                    "description": "Should sharing buttons show on this post?"
                },
                "gplusauthorship_enabled": {
                    "type": "(bool)",
                    "description": "Should a Google+ account be associated with this post?"
                },
                "comment_count": {
                    "type": "(int)",
                    "description": "The number of comments for this post."
                },
                "like_count": {
                    "type": "(int)",
                    "description": "The number of likes for this post."
                },
                "i_like": {
                    "type": "(bool)",
                    "description": "Does the current user like this post?"
                },
                "is_reblogged": {
                    "type": "(bool)",
                    "description": "Did the current user reblog this post?"
                },
                "is_following": {
                    "type": "(bool)",
                    "description": "Is the current user following this blog?"
                },
                "global_ID": {
                    "type": "(string)",
                    "description": "A unique WordPress.com-wide representation of a post."
                },
                "featured_image": {
                    "type": "(url)",
                    "description": "The URL to the featured image for this post if it has one."
                },
                "format": {
                    "type": "(string)",
                    "description": {
                        "standard": "Standard",
                        "aside": "Aside",
                        "chat": "Chat",
                        "gallery": "Gallery",
                        "link": "Link",
                        "image": "Image",
                        "quote": "Quote",
                        "status": "Status",
                        "video": "Video",
                        "audio": "Audio"
                    }
                },
                "geo": {
                    "type": "(object|false)",
                    "description": ""
                },
                "publicize_URLs": {
                    "type": "(array)",
                    "description": "Array of Twitter and Facebook URLs published by this post."
                },
                "tags": {
                    "type": "(object)",
                    "description": "Hash of tags (keyed by tag name) applied to the post."
                },
                "categories": {
                    "type": "(object)",
                    "description": "Hash of categories (keyed by category name) applied to the post."
                },
                "attachments": {
                    "type": "(object)",
                    "description": "Hash of post attachments (keyed by attachment ID)."
                },
                "metadata": {
                    "type": "(array)",
                    "description": "Array of post metadata keys and values. All unprotected meta keys are available by default for read requests. Both unprotected and protected meta keys are available for authenticated requests with access. Protected meta keys can be made available with the <code>rest_api_allowed_public_metadata</code> filter."
                },
                "meta": {
                    "type": "(object)",
                    "description": "API result meta data"
                },
                "date_range": {
                    "type": "(object)",
                    "description": "date range covered by current results."
                },
                "number": {
                    "type": "(int)",
                    "description": "The number of posts brought back by current query."
                },
                "posts": {
                    "type": "(array)",
                    "description": "An array of post objects."
                }
            }
        }
    }, {
        "description": "Get a8c posts from the blogs an a12n user follows. User must be an a12n.",
        "method": "GET",
        "path_format": "/read/a8c",
        "path_labeled": "/read/a8c",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "number": {
                    "type": "(int)",
                    "description": "The number of posts to return.  Limit: 40. Default: 10."
                },
                "page": {
                    "type": "(int)",
                    "description": "Return the Nth 1-indexed page of posts."
                },
                "order": {
                    "type": "(string)",
                    "description": {
                        "DESC": "(default) Return posts in descending order.  For dates, that means newest to oldest.",
                        "ASC": "Return posts in ascending order.  For dates, that means oldest to newest."
                    }
                },
                "after": {
                    "type": "(iso 8601 datetime)",
                    "description": "Return posts dated on or after the specified datetime."
                },
                "before": {
                    "type": "(iso 8601 datetime)",
                    "description": "Return posts dated on or before the specified datetime."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "The post ID."
                },
                "site_ID": {
                    "type": "(int)",
                    "description": "The site ID."
                },
                "author": {
                    "type": "(object)",
                    "description": "The author of the post."
                },
                "date": {
                    "type": "(iso 8601 datetime)",
                    "description": "The post's creation time."
                },
                "modified": {
                    "type": "(iso 8601 datetime)",
                    "description": "The post's most recent update time."
                },
                "title": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "URL": {
                    "type": "(url)",
                    "description": "The full permalink URL to the post."
                },
                "short_URL": {
                    "type": "(url)",
                    "description": "The wp.me short URL."
                },
                "content": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "excerpt": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "slug": {
                    "type": "(string)",
                    "description": "The name (slug) for the post, used in URLs."
                },
                "guid": {
                    "type": "(string)",
                    "description": "The GUID for the post."
                },
                "status": {
                    "type": "(string)",
                    "description": {
                        "publish": "The post is published.",
                        "draft": "The post is saved as a draft.",
                        "pending": "The post is pending editorial approval.",
                        "future": "The post is scheduled for future publishing.",
                        "trash": "The post is in the trash."
                    }
                },
                "sticky": {
                    "type": "(bool)",
                    "description": "Is the post sticky?"
                },
                "password": {
                    "type": "(string)",
                    "description": "The plaintext password protecting the post, or, more likely, the empty string if the post is not password protected."
                },
                "parent": {
                    "type": "(object|false)",
                    "description": "A reference to the post's parent, if it has one."
                },
                "type": {
                    "type": "(string)",
                    "description": "The post's post_type. Post types besides post and page need to be whitelisted using the <code>rest_api_allowed_post_types</code> filter."
                },
                "comments_open": {
                    "type": "(bool)",
                    "description": "Is the post open for comments?"
                },
                "pings_open": {
                    "type": "(bool)",
                    "description": "Is the post open for pingbacks, trackbacks?"
                },
                "likes_enabled": {
                    "type": "(bool)",
                    "description": "Is the post open to likes?"
                },
                "sharing_enabled": {
                    "type": "(bool)",
                    "description": "Should sharing buttons show on this post?"
                },
                "gplusauthorship_enabled": {
                    "type": "(bool)",
                    "description": "Should a Google+ account be associated with this post?"
                },
                "comment_count": {
                    "type": "(int)",
                    "description": "The number of comments for this post."
                },
                "like_count": {
                    "type": "(int)",
                    "description": "The number of likes for this post."
                },
                "i_like": {
                    "type": "(bool)",
                    "description": "Does the current user like this post?"
                },
                "is_reblogged": {
                    "type": "(bool)",
                    "description": "Did the current user reblog this post?"
                },
                "is_following": {
                    "type": "(bool)",
                    "description": "Is the current user following this blog?"
                },
                "global_ID": {
                    "type": "(string)",
                    "description": "A unique WordPress.com-wide representation of a post."
                },
                "featured_image": {
                    "type": "(url)",
                    "description": "The URL to the featured image for this post if it has one."
                },
                "format": {
                    "type": "(string)",
                    "description": {
                        "standard": "Standard",
                        "aside": "Aside",
                        "chat": "Chat",
                        "gallery": "Gallery",
                        "link": "Link",
                        "image": "Image",
                        "quote": "Quote",
                        "status": "Status",
                        "video": "Video",
                        "audio": "Audio"
                    }
                },
                "geo": {
                    "type": "(object|false)",
                    "description": ""
                },
                "publicize_URLs": {
                    "type": "(array)",
                    "description": "Array of Twitter and Facebook URLs published by this post."
                },
                "tags": {
                    "type": "(object)",
                    "description": "Hash of tags (keyed by tag name) applied to the post."
                },
                "categories": {
                    "type": "(object)",
                    "description": "Hash of categories (keyed by category name) applied to the post."
                },
                "attachments": {
                    "type": "(object)",
                    "description": "Hash of post attachments (keyed by attachment ID)."
                },
                "metadata": {
                    "type": "(array)",
                    "description": "Array of post metadata keys and values. All unprotected meta keys are available by default for read requests. Both unprotected and protected meta keys are available for authenticated requests with access. Protected meta keys can be made available with the <code>rest_api_allowed_public_metadata</code> filter."
                },
                "meta": {
                    "type": "(object)",
                    "description": "API result meta data"
                },
                "date_range": {
                    "type": "(object)",
                    "description": "date range covered by current results."
                },
                "number": {
                    "type": "(int)",
                    "description": "The number of posts brought back by current query."
                },
                "posts": {
                    "type": "(array)",
                    "description": "An array of post objects."
                }
            }
        }
    }, {
        "description": "List of posts from the blogs a user likes.",
        "method": "GET",
        "path_format": "/read/liked/",
        "path_labeled": "/read/liked/",
        "group": "read",
        "request": {
            "path": [],
            "query": {
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "number": {
                    "type": "(int)",
                    "description": "The number of posts to return.  Limit: 40. Default: 10."
                },
                "page": {
                    "type": "(int)",
                    "description": "Return the Nth 1-indexed page of posts."
                },
                "order": {
                    "type": "(string)",
                    "description": {
                        "DESC": "(default) Return posts in descending order.  For dates, that means newest to oldest.",
                        "ASC": "Return posts in ascending order.  For dates, that means oldest to newest."
                    }
                },
                "after": {
                    "type": "(iso 8601 datetime)",
                    "description": "Return posts dated on or after the specified datetime."
                },
                "before": {
                    "type": "(iso 8601 datetime)",
                    "description": "Return posts dated on or before the specified datetime."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "The post ID."
                },
                "site_ID": {
                    "type": "(int)",
                    "description": "The site ID."
                },
                "author": {
                    "type": "(object)",
                    "description": "The author of the post."
                },
                "date": {
                    "type": "(iso 8601 datetime)",
                    "description": "The post's creation time."
                },
                "modified": {
                    "type": "(iso 8601 datetime)",
                    "description": "The post's most recent update time."
                },
                "title": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "URL": {
                    "type": "(url)",
                    "description": "The full permalink URL to the post."
                },
                "short_URL": {
                    "type": "(url)",
                    "description": "The wp.me short URL."
                },
                "content": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "excerpt": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "slug": {
                    "type": "(string)",
                    "description": "The name (slug) for the post, used in URLs."
                },
                "guid": {
                    "type": "(string)",
                    "description": "The GUID for the post."
                },
                "status": {
                    "type": "(string)",
                    "description": {
                        "publish": "The post is published.",
                        "draft": "The post is saved as a draft.",
                        "pending": "The post is pending editorial approval.",
                        "future": "The post is scheduled for future publishing.",
                        "trash": "The post is in the trash."
                    }
                },
                "sticky": {
                    "type": "(bool)",
                    "description": "Is the post sticky?"
                },
                "password": {
                    "type": "(string)",
                    "description": "The plaintext password protecting the post, or, more likely, the empty string if the post is not password protected."
                },
                "parent": {
                    "type": "(object|false)",
                    "description": "A reference to the post's parent, if it has one."
                },
                "type": {
                    "type": "(string)",
                    "description": "The post's post_type. Post types besides post and page need to be whitelisted using the <code>rest_api_allowed_post_types</code> filter."
                },
                "comments_open": {
                    "type": "(bool)",
                    "description": "Is the post open for comments?"
                },
                "pings_open": {
                    "type": "(bool)",
                    "description": "Is the post open for pingbacks, trackbacks?"
                },
                "likes_enabled": {
                    "type": "(bool)",
                    "description": "Is the post open to likes?"
                },
                "sharing_enabled": {
                    "type": "(bool)",
                    "description": "Should sharing buttons show on this post?"
                },
                "gplusauthorship_enabled": {
                    "type": "(bool)",
                    "description": "Should a Google+ account be associated with this post?"
                },
                "comment_count": {
                    "type": "(int)",
                    "description": "The number of comments for this post."
                },
                "like_count": {
                    "type": "(int)",
                    "description": "The number of likes for this post."
                },
                "i_like": {
                    "type": "(bool)",
                    "description": "Does the current user like this post?"
                },
                "is_reblogged": {
                    "type": "(bool)",
                    "description": "Did the current user reblog this post?"
                },
                "is_following": {
                    "type": "(bool)",
                    "description": "Is the current user following this blog?"
                },
                "global_ID": {
                    "type": "(string)",
                    "description": "A unique WordPress.com-wide representation of a post."
                },
                "featured_image": {
                    "type": "(url)",
                    "description": "The URL to the featured image for this post if it has one."
                },
                "format": {
                    "type": "(string)",
                    "description": {
                        "standard": "Standard",
                        "aside": "Aside",
                        "chat": "Chat",
                        "gallery": "Gallery",
                        "link": "Link",
                        "image": "Image",
                        "quote": "Quote",
                        "status": "Status",
                        "video": "Video",
                        "audio": "Audio"
                    }
                },
                "geo": {
                    "type": "(object|false)",
                    "description": ""
                },
                "publicize_URLs": {
                    "type": "(array)",
                    "description": "Array of Twitter and Facebook URLs published by this post."
                },
                "tags": {
                    "type": "(object)",
                    "description": "Hash of tags (keyed by tag name) applied to the post."
                },
                "categories": {
                    "type": "(object)",
                    "description": "Hash of categories (keyed by category name) applied to the post."
                },
                "attachments": {
                    "type": "(object)",
                    "description": "Hash of post attachments (keyed by attachment ID)."
                },
                "metadata": {
                    "type": "(array)",
                    "description": "Array of post metadata keys and values. All unprotected meta keys are available by default for read requests. Both unprotected and protected meta keys are available for authenticated requests with access. Protected meta keys can be made available with the <code>rest_api_allowed_public_metadata</code> filter."
                },
                "meta": {
                    "type": "(object)",
                    "description": "API result meta data"
                },
                "date_range": {
                    "type": "(object)",
                    "description": "date range covered by current results."
                },
                "number": {
                    "type": "(int)",
                    "description": "The number of posts brought back by current query."
                },
                "posts": {
                    "type": "(array)",
                    "description": "An array of post objects."
                }
            }
        }
    }, {
        "description": "List of posts from a tag",
        "method": "GET",
        "path_format": "/read/tags/%s/posts",
        "path_labeled": "/read/tags/$tag/posts",
        "group": "read",
        "request": {
            "path": {
                "$tag": {
                    "type": "(string)",
                    "description": "The tag name"
                }
            },
            "query": {
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "number": {
                    "type": "(int)",
                    "description": "The number of posts to return.  Limit: 40. Default: 10."
                },
                "page": {
                    "type": "(int)",
                    "description": "Return the Nth 1-indexed page of posts."
                },
                "order": {
                    "type": "(string)",
                    "description": {
                        "DESC": "(default) Return posts in descending order.  For dates, that means newest to oldest.",
                        "ASC": "Return posts in ascending order.  For dates, that means oldest to newest."
                    }
                },
                "after": {
                    "type": "(iso 8601 datetime)",
                    "description": "Return posts dated on or after the specified datetime."
                },
                "before": {
                    "type": "(iso 8601 datetime)",
                    "description": "Return posts dated on or before the specified datetime."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "The post ID."
                },
                "site_ID": {
                    "type": "(int)",
                    "description": "The site ID."
                },
                "author": {
                    "type": "(object)",
                    "description": "The author of the post."
                },
                "date": {
                    "type": "(iso 8601 datetime)",
                    "description": "The post's creation time."
                },
                "modified": {
                    "type": "(iso 8601 datetime)",
                    "description": "The post's most recent update time."
                },
                "title": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "URL": {
                    "type": "(url)",
                    "description": "The full permalink URL to the post."
                },
                "short_URL": {
                    "type": "(url)",
                    "description": "The wp.me short URL."
                },
                "content": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "excerpt": {
                    "type": "(html)",
                    "description": "<code>context</code> dependent."
                },
                "slug": {
                    "type": "(string)",
                    "description": "The name (slug) for the post, used in URLs."
                },
                "guid": {
                    "type": "(string)",
                    "description": "The GUID for the post."
                },
                "status": {
                    "type": "(string)",
                    "description": {
                        "publish": "The post is published.",
                        "draft": "The post is saved as a draft.",
                        "pending": "The post is pending editorial approval.",
                        "future": "The post is scheduled for future publishing.",
                        "trash": "The post is in the trash."
                    }
                },
                "sticky": {
                    "type": "(bool)",
                    "description": "Is the post sticky?"
                },
                "password": {
                    "type": "(string)",
                    "description": "The plaintext password protecting the post, or, more likely, the empty string if the post is not password protected."
                },
                "parent": {
                    "type": "(object|false)",
                    "description": "A reference to the post's parent, if it has one."
                },
                "type": {
                    "type": "(string)",
                    "description": "The post's post_type. Post types besides post and page need to be whitelisted using the <code>rest_api_allowed_post_types</code> filter."
                },
                "comments_open": {
                    "type": "(bool)",
                    "description": "Is the post open for comments?"
                },
                "pings_open": {
                    "type": "(bool)",
                    "description": "Is the post open for pingbacks, trackbacks?"
                },
                "likes_enabled": {
                    "type": "(bool)",
                    "description": "Is the post open to likes?"
                },
                "sharing_enabled": {
                    "type": "(bool)",
                    "description": "Should sharing buttons show on this post?"
                },
                "gplusauthorship_enabled": {
                    "type": "(bool)",
                    "description": "Should a Google+ account be associated with this post?"
                },
                "comment_count": {
                    "type": "(int)",
                    "description": "The number of comments for this post."
                },
                "like_count": {
                    "type": "(int)",
                    "description": "The number of likes for this post."
                },
                "i_like": {
                    "type": "(bool)",
                    "description": "Does the current user like this post?"
                },
                "is_reblogged": {
                    "type": "(bool)",
                    "description": "Did the current user reblog this post?"
                },
                "is_following": {
                    "type": "(bool)",
                    "description": "Is the current user following this blog?"
                },
                "global_ID": {
                    "type": "(string)",
                    "description": "A unique WordPress.com-wide representation of a post."
                },
                "featured_image": {
                    "type": "(url)",
                    "description": "The URL to the featured image for this post if it has one."
                },
                "format": {
                    "type": "(string)",
                    "description": {
                        "standard": "Standard",
                        "aside": "Aside",
                        "chat": "Chat",
                        "gallery": "Gallery",
                        "link": "Link",
                        "image": "Image",
                        "quote": "Quote",
                        "status": "Status",
                        "video": "Video",
                        "audio": "Audio"
                    }
                },
                "geo": {
                    "type": "(object|false)",
                    "description": ""
                },
                "publicize_URLs": {
                    "type": "(array)",
                    "description": "Array of Twitter and Facebook URLs published by this post."
                },
                "tags": {
                    "type": "(object)",
                    "description": "Hash of tags (keyed by tag name) applied to the post."
                },
                "categories": {
                    "type": "(object)",
                    "description": "Hash of categories (keyed by category name) applied to the post."
                },
                "attachments": {
                    "type": "(object)",
                    "description": "Hash of post attachments (keyed by attachment ID)."
                },
                "metadata": {
                    "type": "(array)",
                    "description": "Array of post metadata keys and values. All unprotected meta keys are available by default for read requests. Both unprotected and protected meta keys are available for authenticated requests with access. Protected meta keys can be made available with the <code>rest_api_allowed_public_metadata</code> filter."
                },
                "meta": {
                    "type": "(object)",
                    "description": "API result meta data"
                },
                "date_range": {
                    "type": "(object)",
                    "description": "date range covered by current results."
                },
                "number": {
                    "type": "(int)",
                    "description": "The number of posts brought back by current query."
                },
                "posts": {
                    "type": "(array)",
                    "description": "An array of post objects."
                }
            }
        }
    }, {
        "description": "Returns the list of tags subscribed to by the user.",
        "method": "GET",
        "path_format": "/read/tags",
        "path_labeled": "/read/tags",
        "group": "read",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "tags": {
                    "type": "(array)",
                    "description": "The list of subscribed tags."
                }
            }
        }
    }, {
        "description": "Returns details about a specified tag.",
        "method": "GET",
        "path_format": "/read/tags/%s",
        "path_labeled": "/read/tags/$tag",
        "group": "read",
        "request": {
            "path": {
                "$tag": {
                    "type": "(string)",
                    "description": "The tag name"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "tag": {
                    "type": "(object)",
                    "description": "An object containing the tag ID, title, and endpoint."
                }
            }
        }
    }, {
        "description": "Returns the subscribed status of the user.",
        "method": "GET",
        "path_format": "/read/tags/%s/mine",
        "path_labeled": "/read/tags/$tag/mine",
        "group": "read",
        "request": {
            "path": {
                "$tag": {
                    "type": "(string)",
                    "description": "The tag name"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "subscribed": {
                    "type": "(boolean)",
                    "description": "True if the user is subscribed and false if the user is unsubscribed."
                }
            }
        }
    }, {
        "description": "Subscribe to a new tag.",
        "method": "POST",
        "path_format": "/read/tags/%s/mine/new",
        "path_labeled": "/read/tags/$tag/mine/new",
        "group": "read",
        "request": {
            "path": {
                "$tag": {
                    "type": "(string)",
                    "description": "The name of the tag"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "subscribed": {
                    "type": "(boolean)",
                    "description": "True if the user is subscribed and false if the user is unsubscribed."
                }
            }
        }
    }, {
        "description": "Unsubscribe from a tag.",
        "method": "POST",
        "path_format": "/read/tags/%s/mine/delete",
        "path_labeled": "/read/tags/$tag/mine/delete",
        "group": "read",
        "request": {
            "path": {
                "$tag": {
                    "type": "(string)",
                    "description": "The name of the tag to unsubscribe from."
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "subscribed": {
                    "type": "(boolean)",
                    "description": "True if the user is subscribed and false if the user is unsubscribed."
                }
            }
        }
    }, {
        "description": "List the feeds the user is following.",
        "method": "GET",
        "path_format": "/read/following/mine",
        "path_labeled": "/read/following/mine",
        "group": "read",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "subscriptions": {
                    "type": "(array)",
                    "description": "An array of the feeds the user subscribes."
                }
            }
        }
    }, {
        "description": "Follow the specified blog.",
        "method": "POST",
        "path_format": "/read/following/mine/new",
        "path_labeled": "/read/following/mine/new",
        "group": "read",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "url": {
                    "type": "(string)",
                    "description": "The URL of the blog to follow."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "subscribed": {
                    "type": "(boolean)",
                    "description": "True if the user is subscribed, false if the user is not."
                }
            }
        }
    }, {
        "description": "Unfollow the specified blog.",
        "method": "POST",
        "path_format": "/read/following/mine/delete",
        "path_labeled": "/read/following/mine/delete",
        "group": "read",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "url": {
                    "type": "(string)",
                    "description": "The URL of the blog you want to unfollow."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "subscribed": {
                    "type": "(boolean)",
                    "description": "True if the user is subscribed, false if the user is not."
                }
            }
        }
    }, {
        "description": "(beta) Register a devices for Push Notifications.",
        "method": "POST",
        "path_format": "/devices/new",
        "path_labeled": "/devices/new",
        "group": "__do_not_document",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "device_token": {
                    "type": "(string)",
                    "description": "The device token."
                },
                "device_family": {
                    "type": "(string)",
                    "description": "The device family. Could be \"android\", \"win_phone\", or \"apple\" for now."
                },
                "app_secret_key": {
                    "type": "(string)",
                    "description": "The client secret of the app requesting the registration of the token."
                },
                "device_name": {
                    "type": "(string)",
                    "description": "The name of the device."
                },
                "device_model": {
                    "type": "(string)",
                    "description": "The device's model, that is used for stats purpose."
                },
                "os_version": {
                    "type": "(string)",
                    "description": "The device operating system version."
                },
                "app_version": {
                    "type": "(string)",
                    "description": "The current app version."
                },
                "win_channel_uri": {
                    "type": "(string)",
                    "description": "The URL of the PNs endpoint for this device. Only used by windows phone."
                },
                "device_uuid": {
                    "type": "(string)",
                    "description": "The device UUID. It's unique on the same device."
                }
            }
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "The device ID"
                },
                "settings": {
                    "type": "(array)",
                    "description": "Available settings"
                }
            }
        }
    }, {
        "description": "Un-register a mobile devices.",
        "method": "POST",
        "path_format": "/devices/%d/delete",
        "path_labeled": "/devices/$device/delete",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$device": {
                    "type": "(int)",
                    "description": "The device ID."
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "success": {
                    "type": "(bool)",
                    "description": "Was the operation successful?"
                }
            }
        }
    }, {
        "description": "Return notification settings for a device",
        "method": "GET",
        "path_format": "/device/%d",
        "path_labeled": "/device/$device",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$device": {
                    "type": "(int)",
                    "description": "The device ID"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "The device ID"
                },
                "settings": {
                    "type": "(array)",
                    "description": "Available settings"
                }
            }
        }
    }, {
        "description": "Set notification settings for a device",
        "method": "POST",
        "path_format": "/device/%d",
        "path_labeled": "/device/$device",
        "group": "__do_not_document",
        "request": {
            "path": {
                "$device": {
                    "type": "(int)",
                    "description": "The device ID"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "settings": {
                    "type": "(array|string)",
                    "description": "The settings array."
                }
            }
        },
        "response": {
            "body": {
                "ID": {
                    "type": "(int)",
                    "description": "The device ID"
                },
                "settings": {
                    "type": "(array)",
                    "description": "Available settings"
                }
            }
        }
    }, {
        "description": "Get recommendations to blogs you may like",
        "method": "GET",
        "path_format": "/read/recommendations/mine/",
        "path_labeled": "/read/recommendations/mine/",
        "group": "read",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                },
                "exclude": {
                    "type": "(array|string)",
                    "description": "Array of blog_ids to exclude."
                },
                "number": {
                    "type": "(int)",
                    "description": "Number of blogs to return (optional, default is 4)."
                },
                "lang": {
                    "type": "(string)",
                    "description": "Language code for localized reason strings."
                },
                "source": {
                    "type": "(string)",
                    "description": "The source this request comes from: [\"mobile\", \"reader_sidebar\", \"reader_inline\", \"recap_2013\"]"
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "blogs": {
                    "type": "(array)",
                    "description": "List of blogs you may like"
                }
            }
        }
    }, {
        "description": "Get a list of your jetpack enabled blogs",
        "method": "GET",
        "path_format": "/jetpack-blogs/",
        "path_labeled": "/jetpack-blogs/",
        "group": "site",
        "request": {
            "path": [],
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "success": {
                    "type": "(bool)",
                    "description": "Was the operation successful?"
                },
                "blogs": {
                    "type": "(array)",
                    "description": "List of jetpack enabled blogs"
                }
            }
        }
    }, {
        "description": "Disconnect a jetpack enabled blog from a wordpress.com user",
        "method": "POST",
        "path_format": "/jetpack-blogs/%d/mine/delete",
        "path_labeled": "/jetpack-blogs/$blog_id/mine/delete",
        "group": "site",
        "request": {
            "path": {
                "$blog_id": {
                    "type": "(int)",
                    "description": "The blog id"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "success": {
                    "type": "(bool)",
                    "description": "Was the operation successful?"
                },
                "message": {
                    "type": "(string)",
                    "description": "Message describing the error code."
                }
            }
        }
    }, {
        "description": "Get jetpack settings",
        "method": "GET",
        "path_format": "/jetpack-blogs/%d/",
        "path_labeled": "/jetpack-blogs/$blog_id/",
        "group": "site",
        "request": {
            "path": {
                "$blog_id": {
                    "type": "(int)",
                    "description": "The blog id"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "success": {
                    "type": "(bool)",
                    "description": "Was the operation successful?"
                },
                "settings": {
                    "type": "(array)",
                    "description": "Available settings."
                }
            }
        }
    }, {
        "description": "Update jetpack settings",
        "method": "POST",
        "path_format": "/jetpack-blogs/%d/",
        "path_labeled": "/jetpack-blogs/$blog_id/",
        "group": "site",
        "request": {
            "path": {
                "$blog_id": {
                    "type": "(int)",
                    "description": "The blog id"
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": {
                "monitor_active": {
                    "type": "(string)",
                    "description": "if true, monitoring will be enabled"
                },
                "email_notifications": {
                    "type": "(string)",
                    "description": "If true, email notifications will be enabled"
                }
            }
        },
        "response": {
            "body": {
                "success": {
                    "type": "(bool)",
                    "description": "Was the operation successful?"
                },
                "message": {
                    "type": "(string)",
                    "description": "Message describing the error code."
                }
            }
        }
    }, {
        "description": "Migrate followers from a WordPress.com blog to a Jetpack-enabled blog.",
        "method": "POST",
        "path_format": "/jetpack-blogs/%d/source/%d/migrate/",
        "path_labeled": "/jetpack-blogs/$dest_blog_id/source/$source_blog_id/migrate/",
        "group": "site",
        "request": {
            "path": {
                "$dest_blog_id": {
                    "type": "(int)",
                    "description": "The Jetpack-enabled blog where followers are moving."
                },
                "$source_blog_id": {
                    "type": "(int)",
                    "description": "The WordPress.com blog where followers currently reside."
                }
            },
            "query": {
                "context": {
                    "type": "(string)",
                    "description": {
                        "display": "(default) Formats the output as HTML for display.  Shortcodes are parsed, paragraph tags are added, etc..",
                        "edit": "Formats the output for editing.  Shortcodes are left unparsed, significant whitespace is kept, etc.."
                    }
                },
                "http_envelope": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Some environments (like in-browser Javascript or Flash) block or divert responses with a non-200 HTTP status code.  Setting this parameter will force the HTTP status code to always be 200.  The JSON response is wrapped in an \"envelope\" containing the \"real\" HTTP status code and headers."
                    }
                },
                "pretty": {
                    "type": "(bool)",
                    "description": {
                        "false": "(default) ",
                        "true": "Output pretty JSON"
                    }
                },
                "meta": {
                    "type": "(string)",
                    "description": "Optional. Loads data from the endpoints found in the 'meta' part of the response. Comma separated list. Example: meta=site,likes"
                },
                "fields": {
                    "type": "(string)",
                    "description": "Optional. Returns specified fields only. Comma separated list. Example: fields=ID,title"
                },
                "callback": {
                    "type": "(string)",
                    "description": "An optional JSONP callback function."
                }
            },
            "body": []
        },
        "response": {
            "body": {
                "success": {
                    "type": "(bool)",
                    "description": "Was the operation successful?"
                },
                "settings": {
                    "type": "(array)",
                    "description": "Available settings."
                }
            }
        }
    }
    ]
}
